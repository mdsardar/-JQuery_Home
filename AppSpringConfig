package com.citigroup.amlcdd.appconfig;

import java.io.IOException;
import java.lang.management.ManagementFactory;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

import javax.management.MBeanServer;
import javax.management.MBeanServerFactory;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.CacheManager;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.cache.ehcache.EhCacheCacheManager;
import org.springframework.cache.ehcache.EhCacheManagerFactoryBean;
import org.springframework.context.MessageSource;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.EnableAspectJAutoProxy;
import org.springframework.context.annotation.ImportResource;
import org.springframework.context.annotation.PropertySource;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import org.springframework.context.support.ResourceBundleMessageSource;
import org.springframework.core.env.Environment;
import org.springframework.core.io.ClassPathResource;
import org.springframework.http.converter.StringHttpMessageConverter;
import org.springframework.jmx.export.MBeanExporter;
import org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource;
import org.springframework.jmx.export.assembler.MethodNameBasedMBeanInfoAssembler;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.JavaMailSenderImpl;
import org.springframework.retry.policy.SimpleRetryPolicy;
import org.springframework.retry.support.RetryTemplate;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.multipart.commons.CommonsMultipartResolver;
import org.springframework.web.servlet.ViewResolver;
import org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.config.annotation.PathMatchConfigurer;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
import org.springframework.web.servlet.config.annotation.ViewResolverRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;
import org.springframework.web.servlet.view.InternalResourceViewResolver;
import org.springframework.web.servlet.view.JstlView;
import org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer;

import com.citigroup.amlcdd.common.constants.AMLCDDConstants;
import com.citigroup.amlcdd.framework.util.DynamicNamingStrategy;
import com.citigroup.amlcdd.framework.util.WebsphereObjectNamingStrategy;
import com.citigroup.amlcdd.risk.computingengine.service.CountrySpecificRiskServiceImpl;

import freemarker.template.TemplateException;
import freemarker.template.TemplateExceptionHandler;

/*import com.ibm.websphere.management.AdminService;
import com.ibm.websphere.management.AdminServiceFactory;*/


/**
 * 
 * Class to load all the initial configurations
 * and first class to get called after web.xml
 */
@Configuration
@EnableWebMvc
@EnableCaching
@EnableAspectJAutoProxy
@PropertySource("file:"+AMLCDDConstants.CONFIG_PATH+"/amlcdd.properties")
@ComponentScan(basePackages = "com.citigroup.amlcdd")
@ImportResource({ "WEB-INF/spring/springdbconf.xml", "classpath:/jbpm/jbpm-config.xml" })
public class AppSpringConfig extends WebMvcConfigurerAdapter {

	private final Logger LOGGER = LoggerFactory.getLogger(AppSpringConfig.class);
	
	@Autowired
    private Environment environment;
	
/*	@Autowired
	private MBeanServer mBeanServer;
	
	@Autowired
	private DynamicNamingStrategy dynamicNamingStrategy;*/
	
	/**
	 * 
	 * Method Name: viewResolver
	 * Description: Method to Configure ViewResolvers to deliver preferred views.
	 * @return ViewResolver
	 * @param 
	 *
	 */
	@Bean
	public ViewResolver viewResolver() {
		InternalResourceViewResolver viewResolver = new InternalResourceViewResolver();
		viewResolver.setViewClass(JstlView.class);
		viewResolver.setPrefix("/WEB-INF/views/");
		viewResolver.setSuffix(".jsp");
		return viewResolver;
	}
	/**
	 * 
	 * Method Name: getFreemarkerConfig
	 * Description: Method to  load the template path for Freemarker template
	 * @return FreeMarkerConfigurer
	 * @param 
	 * @throws TemplateException 
	 * @throws IOException 
	 *
	 */
	@Bean(name = "freemarkerConfig")
	public FreeMarkerConfigurer getFreemarkerConfig() throws IOException, TemplateException {
		FreeMarkerConfigurer config = new FreeMarkerConfigurer();
		// Folder containing FreeMarker templates.
		config.setTemplateLoaderPath("/WEB-INF/templates/");
		config.setDefaultEncoding("UTF-8");
		freemarker.template.Configuration configuration = config
				.createConfiguration();
		configuration.setTemplateExceptionHandler(TemplateExceptionHandler.IGNORE_HANDLER);
		config.setConfiguration(configuration);
		return config;
	}

	
	/**
	 * Method Name: configureViewResolvers
	 * Description: Method to  register Freemarker view resolver to Spring
	 * @return void
	 * @param ViewResolverRegistry registry
	 */
	@Override
	public void configureViewResolvers(ViewResolverRegistry registry) {
		registry.freeMarker();
	}

	/**
	 * Method Name: addResourceHandlers
	 * Description: Configure ResourceHandlers to serve static 
	 * resources like CSS/ Javascript etc...
	 * @return void
	 * @param ResourceHandlerRegistry registry
	 */
	@Override
	public void addResourceHandlers(ResourceHandlerRegistry registry) {
		registry.addResourceHandler("/js/**").addResourceLocations("/js/");
		registry.addResourceHandler("/images/**").addResourceLocations("/images/");
		registry.addResourceHandler("/css/**").addResourceLocations("/css/");
	}

	/**
	 * Method Name: messageSource
	 * Description: Configure MessageSource to lookup any validation/error message
	 * in internationalized property files 
	 * @return void
	 * @param 
	 */
	@Bean
	public MessageSource messageSource() {
		ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();
		messageSource.setBasename("messages");
		return messageSource;
	}
	
	/**
	 * Optional. It's only required when handling '.' in @PathVariables which
	 * otherwise ignore everything after last '.' in @PathVaidables argument.
	 * It's a known bug in Spring [https://jira.spring.io/browse/SPR-6164],
	 * still present in Spring 4.1.7.
	 * This is a workaround for this issue.
	 */
	@Override
	public void configurePathMatch(PathMatchConfigurer matcher) {
		matcher.setUseRegisteredSuffixPatternMatch(true);
	}

	/**
	 * Method Name: configureDefaultServletHandling
	 * Description: Configure Default Servlet Mapping to Spring
	 * @return void
	 * @param 
	 */
	@Override
	public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {
		configurer.enable();
	}
	
	@Bean
	public CacheManager cacheManager() {
		return new EhCacheCacheManager(ehCacheCacheManager().getObject());
	}

	@Bean
	public EhCacheManagerFactoryBean ehCacheCacheManager() {
		EhCacheManagerFactoryBean ehcacheFactory = new EhCacheManagerFactoryBean();
		ehcacheFactory.setConfigLocation(new ClassPathResource("WEB-INF/spring/ehcache.xml"));
		ehcacheFactory.setShared(true);
		return ehcacheFactory;
	}
	
	@Bean
	public RestTemplate restTemplate() {
	    return new RestTemplate();
	}
	
	@Bean
	public RetryTemplate retryTemplate() {
	    return new RetryTemplate();
	}
	
	@Bean
	public SimpleRetryPolicy simpleRetryPolicy() {
	    return new SimpleRetryPolicy();
	}
	
	/**
	 * Method Name: multipartResolver
	 * Description: Configure CommonsMultipartResolver to save Documents as Blob in DB
	 * @return CommonsMultipartResolver
	 * @param 
	 */
	@Bean
    public CommonsMultipartResolver multipartResolver() {
        CommonsMultipartResolver cmr = new CommonsMultipartResolver();
        return cmr;

    }
	
	/**
	 * Method Name: getMailSender
	 * Description: Method to get config email SMTP Server Details
	 * @return
	 */
	 @Bean
	    public JavaMailSender getMailSender(){
	        JavaMailSenderImpl mailSender = new JavaMailSenderImpl();
	         
	        //Need to set the existing email configuration.
	        mailSender.setHost(environment.getRequiredProperty("mail.host"));
	        mailSender.setPort(Integer.parseInt(environment.getRequiredProperty("mail.port")));
	        mailSender.setUsername(environment.getRequiredProperty("mail.username"));
	        mailSender.setPassword(environment.getRequiredProperty("mail.password"));
	         
	        Properties javaMailProperties = new Properties();
	        javaMailProperties.put("mail.smtp.starttls.enable", environment.getRequiredProperty("mail.smtp.starttls.enable"));
	        javaMailProperties.put("mail.smtp.auth", environment.getRequiredProperty("mail.smtp.auth"));
	        javaMailProperties.put("mail.transport.protocol", environment.getRequiredProperty("mail.transport.protocol"));
	        //Prints out everything on console
	        javaMailProperties.put("mail.debug", environment.getRequiredProperty("mail.debug"));
	         
	        mailSender.setJavaMailProperties(javaMailProperties);
	        return mailSender;
	    }
	 
	 /**
	  * 
	  * Method Name: stringHttpMessageConverter
	  * Description: Method to perform UTF-8 encoding
	  * @return StringHttpMessageConverter
	  * @param 
	  *
	  */
	 @Bean
	 public StringHttpMessageConverter stringHttpMessageConverter() {
	     return new StringHttpMessageConverter(Charset.forName("UTF-8"));
	 }
	 
	/* 
	 @Bean(name="countrySpecificRiskService")
	 @Scope(proxyMode = ScopedProxyMode.TARGET_CLASS )
	 public CountrySpecificRiskServiceImpl countrySpecificRiskServiceImpl() {
		 return new CountrySpecificRiskServiceImpl();
	 }
	 */
	 
/*	 @Bean
	 public MBeanExporter mBeanExporter() {
		 System.out.println("######################### Inside Mbean Exporter ################################### ");
		 LOGGER.info("######################### Inside Mbean Exporter ################################### ");
		 MBeanExporter mBeanExporter = new MBeanExporter();
		 MethodNameBasedMBeanInfoAssembler methodNameBasedMBeanInfoAssembler = new MethodNameBasedMBeanInfoAssembler();
		 methodNameBasedMBeanInfoAssembler.setManagedMethods(new String[] {"execute"});	 
		 Map<String,Object> mBeans = new HashMap<> ();
		 mBeans.put("bean:name=workflowInitService", "workflowInitService");
		 LOGGER.info("######## MBeans in Map : "+mBeans);
		 mBeanExporter.setAutodetect(true);
		 mBeanExporter.setNamingStrategy(dynamicNamingStrategy);
		 mBeanExporter.setAssembler(methodNameBasedMBeanInfoAssembler);
		 mBeanExporter.setBeans(mBeans);
		 mBeanExporter.setServer(mBeanServer);
		 LOGGER.info("######## MBean Exporter Server : " + mBeanExporter.getServer() );
		 LOGGER.info("######## MBean Exporter object : " + mBeanExporter);
		 return mBeanExporter;
	 }
	 
	 @Bean
	 public AnnotationJmxAttributeSource attributeSource() {
		 return new AnnotationJmxAttributeSource();
	 }
	 
	 @Bean
	 public MBeanServer mBeanServer() {
		 LOGGER.info("###### Inside mBeanServer() method ########");	 
		 MBeanServer mBeanServer  = ManagementFactory.getPlatformMBeanServer();
		 for (MBeanServer server : MBeanServerFactory.findMBeanServer(null)) {
			 	LOGGER.info("###### Server Default domain ######## "+server.getDefaultDomain());
				if ( "websphere".equals(server.getDefaultDomain())) {
					mBeanServer = server;
					break;
				}
			}	 
		 return mBeanServer;
	 }*/
	 
}
