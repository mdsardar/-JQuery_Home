/**
 * 
 */
package com.citigroup.amlcdd.appconfig.security;

import java.io.IOException;
import java.util.HashSet;

import javax.servlet.Filter;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import org.springframework.core.env.Environment;
import org.springframework.security.authentication.DisabledException;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper;
import org.springframework.security.core.userdetails.UserDetailsChecker;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.web.AuthenticationEntryPoint;
import org.springframework.security.web.DefaultRedirectStrategy;
import org.springframework.security.web.RedirectStrategy;
import org.springframework.security.web.access.AccessDeniedHandlerImpl;
import org.springframework.security.web.access.ExceptionTranslationFilter;
import org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider;
import org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationToken;
import org.springframework.security.web.authentication.preauth.PreAuthenticatedCredentialsNotFoundException;
import org.springframework.security.web.context.HttpSessionSecurityContextRepository;

import com.citigroup.amlcdd.common.constants.AMLCDDConstants;
import com.citigroup.amlcdd.common.constants.EntitlementStatusEnum;
import com.citigroup.amlcdd.framework.context.UserContext;
import com.citigroup.amlcdd.login.service.IUserLogService;

/**
 * @author nb37530
 *
 */
@Configuration
@EnableWebSecurity
@EnableGlobalMethodSecurity(prePostEnabled = true)
@PropertySource("file:"+AMLCDDConstants.CONFIG_PATH+"/amlcdd.properties")
public class AppSecurityConfig extends WebSecurityConfigurerAdapter {

	private static final Logger logger = LoggerFactory.getLogger(AppSecurityConfig.class);
	
	@Autowired
    private CustomAuthenticationProvider customAuthenticationProvider;
	
	@Autowired
    private Environment environment;
	
	@Autowired
	@Qualifier("userDetailsService")
	UserDetailsService userDetailsService;
	
	@Autowired
	IUserLogService userLogService;
	
	@Autowired
	public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {
		String appEnvironment = environment.getRequiredProperty("amlcdd.env");
		logger.info("Environment from Property file : "+appEnvironment);
		if(null != appEnvironment && appEnvironment.trim().equalsIgnoreCase("DEV")){
			logger.info("App Environment is Development");
			/* For local login starts*/
			auth.authenticationProvider(customAuthenticationProvider);
			/* For local login ends*/
		}else{
			logger.info("App Environment is Non-Development");
			/*Configuration for SSO integration - STARTS */
			
			PreAuthenticatedAuthenticationProvider preAuthenticationProvider = new PreAuthenticatedAuthenticationProvider();
			preAuthenticationProvider.setUserDetailsChecker(new CddUserDetailsChecker());
				 UserDetailsByNameServiceWrapper<PreAuthenticatedAuthenticationToken> wrapper = new UserDetailsByNameServiceWrapper<PreAuthenticatedAuthenticationToken>(
						 userDetailsService);
				preAuthenticationProvider.setPreAuthenticatedUserDetailsService(wrapper);
				auth.authenticationProvider(preAuthenticationProvider);
				
				/*Configuration for SSO integration - ENDS */
		}
		
	}
	
	private class CddUserDetailsChecker implements UserDetailsChecker{
		@Override
		public void check(UserDetails user) {
			if(null != user){
				if(!user.isEnabled()){
					logger.info("User is not active in the system");
					UserContext userCx = new UserContext(user.getUsername(), "", new HashSet<GrantedAuthority>());
					userCx.setErrMessage("User is not active in the System");
					userLogService.logUserActivity(userCx, EntitlementStatusEnum.LOGIN.getVal(), false);
					throw new  DisabledException("User is not active");
				}
			}else{
				logger.info("User doesn't have entitlement with the system");
				throw new PreAuthenticatedCredentialsNotFoundException("User doesn't have entitlement with the system");
			}
		}
	}
	
	@Override
	protected void configure(HttpSecurity http) throws Exception {
		String appEnvironment = environment.getRequiredProperty("amlcdd.env");
		logger.info("In configure() method Environment from Property file : "+appEnvironment);
		if(null != appEnvironment && appEnvironment.trim().equalsIgnoreCase("DEV")){
			/*For local login - STARTS */
			http.authorizeRequests()
	        .antMatchers("/showLogin").permitAll()
	        .antMatchers("/","/*","/*/*").access("hasAuthority('CDDUSER')")
	         .and().formLogin().loginPage("/showLogin")
	        .loginProcessingUrl("/")
	        .usernameParameter("username").passwordParameter("password")
	        .and().csrf().disable();
			
			/*For local login - ENDS */
		} else {
			/*Configuration for SSO integration - STARTS */
			
			/*RequestHeaderAuthenticationFilter siteMinderFilter = new RequestHeaderAuthenticationFilter();*/
			CddCustomSSOPreAuthenticationFilter siteMinderFilter = new CddCustomSSOPreAuthenticationFilter(environment);
			 siteMinderFilter.setAuthenticationManager(authenticationManager());
			 siteMinderFilter.setExceptionIfHeaderMissing(false);
	        
	        http
	        .addFilter(siteMinderFilter)
	        .addFilterAfter(addExceptionTranslationFilter(),ExceptionTranslationFilter.class)
	        .authorizeRequests()
	        .antMatchers("/userAdmin/accessDenied").permitAll()
	        .anyRequest().hasAuthority("CDDUSER").and().csrf().disable()
	        .exceptionHandling().authenticationEntryPoint(new CddAccessDeniedEntryPoint());
			
			/*Configuration for SSO integration - ENDS */
		}
		// http.addFilterAfter(ajaxTimeOutRedirectFilter(), ExceptionTranslationFilter.class);
   	}
	
	private class CddAccessDeniedEntryPoint implements AuthenticationEntryPoint {
		@Override
		public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException arg2)
				throws IOException, ServletException {
			
			RedirectStrategy redirectStrategy = new DefaultRedirectStrategy();
			redirectStrategy.sendRedirect(request, response, "/userAdmin/accessDenied");
		}
	}
	
	@Bean
	public ExceptionTranslationFilter addExceptionTranslationFilter(){
		AccessDeniedHandlerImpl accessDeniedhandler = new AccessDeniedHandlerImpl(); 
		accessDeniedhandler.setErrorPage("/userAdmin/accessDenied");
		ExceptionTranslationFilter exceptionTrans = new ExceptionTranslationFilter(new CddAccessDeniedEntryPoint());
		exceptionTrans.setAccessDeniedHandler(accessDeniedhandler);
		return exceptionTrans;
	}
	
	@Bean
	public Filter ajaxTimeOutRedirectFilter() {
		CddAjaxSessionTimeoutRedirectFilter cddAjaxSessionTimeoutRedirectFilter = new CddAjaxSessionTimeoutRedirectFilter();
	    return cddAjaxSessionTimeoutRedirectFilter;
	}
	
	@Bean
	public HttpSessionSecurityContextRepository httpSessionSecurityContextRepository() {
		return new HttpSessionSecurityContextRepository();
	}
	
}
