/*******************************************************************************
 *ALL RIGHTS RESERVED.  Not for disclosure outside of Citigroup 
 *and/or its subsidiaries without express prior written authorization.  
  @ Title : EddController.java
  @ Author    : jr57611
  @ Created On  : Sep 6, 2017
  @ Description : 
 ******************************************************************************/

package com.citigroup.amlcdd.webapp.cdd.controller;

import java.lang.reflect.InvocationTargetException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletResponse;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.collections.CollectionUtils;
import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.citigroup.amlcdd.common.constants.AMLCDDConstants;
import com.citigroup.amlcdd.common.constants.AuditLogActionEventEnum;
import com.citigroup.amlcdd.common.constants.ScreenNameEnum;
import com.citigroup.amlcdd.entity.KycAttachmentEntity;
import com.citigroup.amlcdd.entity.KycEddMapEntity;
import com.citigroup.amlcdd.forms.cdd.vo.CddBaseVO;
import com.citigroup.amlcdd.forms.edd.service.EddValidator;
import com.citigroup.amlcdd.forms.edd.service.IEddService;
import com.citigroup.amlcdd.forms.edd.vo.EddMemberVO;
import com.citigroup.amlcdd.forms.edd.vo.EddSowCompanyProfitsVO;
import com.citigroup.amlcdd.forms.edd.vo.EddSowInheritanceVO;
import com.citigroup.amlcdd.forms.edd.vo.EddSowInvestmentVO;
import com.citigroup.amlcdd.forms.edd.vo.EddSowOtherTypeVO;
import com.citigroup.amlcdd.forms.edd.vo.EddSowSalaryVO;
import com.citigroup.amlcdd.forms.edd.vo.EddSowVO;
import com.citigroup.amlcdd.forms.edd.vo.EddVO;
import com.citigroup.amlcdd.forms.edd.vo.KycEddMapDtlsVO;
import com.citigroup.amlcdd.forms.questions.util.FormErrorMessageRenderUtil;
import com.citigroup.amlcdd.forms.questions.util.NonFormErrorMessageRenderUtil;
import com.citigroup.amlcdd.forms.questions.vo.FormQuestionRenderVO;
import com.citigroup.amlcdd.forms.vo.ResponseVO;
import com.citigroup.amlcdd.framework.exception.AmlCddException;
import com.citigroup.amlcdd.framework.util.CommonUtility;
import com.citigroup.amlcdd.framework.vo.PickListLkUpVO;
import com.citigroup.amlcdd.framework.vo.UiLabelVO;
import com.citigroup.amlcdd.framework.webapp.BaseController;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

@Controller
@RequestMapping("/edd")
public class EddController extends BaseController {
	private static final Logger logger = org.slf4j.LoggerFactory.getLogger(EddController.class);

	private static final String FLD_NM_OF_DNR_EDD_RE = "FLD_NM_OF_DNR_EDD_RE";

	@Autowired
	private IEddService eddService;
	
	@Autowired
	private FormErrorMessageRenderUtil formErrorMessageRenderUtil;
	
	@Autowired
	private NonFormErrorMessageRenderUtil nonFormErrorMessageRenderUtil;
	
	@Autowired
	EddValidator eddValidator;

	@RequestMapping(value = "/init", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE)
	public String initEDDDetailsForm(@RequestBody EddVO eddVO, @ModelAttribute("model") ModelMap model) {
		logger.info("Inside initEDDDetailsForm for Control Number " + eddVO.getCddControlNumber());
		List<String> pickListTypes = null;
		List<String> pickListTypesWithSelect = null;
		Map<String, List<PickListLkUpVO>> eddPickListMap = null;
		Map<String, List<PickListLkUpVO>> eddPickListWithSelectMap = null;
		Map<String, List<EddMemberVO>> idTypeCustomerMap = new HashMap<String, List<EddMemberVO>>();
		Map<String, List<EddMemberVO>> idTypeMemberMap = new HashMap<String, List<EddMemberVO>>();
		
		Map<String, FormQuestionRenderVO> mapWithQstAndVo = null;
		try {
			eddVO.setCurrScreenName(ScreenNameEnum.EDD.getScreenName());
			mapWithQstAndVo = super.getFormQuestionDetails(eddVO);
			model.addAttribute(AMLCDDConstants.EDD_FORM_QUESTIONS, mapWithQstAndVo);
			pickListTypes = new ArrayList<String>();
			pickListTypes.add(AMLCDDConstants.PICK_YE_NO);	
			pickListTypes.add(AMLCDDConstants.EMPLOYMENT_TYPE);
			pickListTypes.add(AMLCDDConstants.SOW_RETAIL);
			pickListTypes.add(AMLCDDConstants.LEGAL_ENTITIES);
			pickListTypes.add(AMLCDDConstants.LEGAL_FORMATION_DOCS);
			pickListTypes.add(AMLCDDConstants.ENTIT_ENGAGED);
			pickListTypes.add(AMLCDDConstants.SPACE_OCCUPIED);
			pickListTypes.add(AMLCDDConstants.METHOD_OF_PAYMENT);
			pickListTypes.add(AMLCDDConstants.YE_NO_NA);
			
			eddPickListMap=super.getPickList(pickListTypes);
			pickListTypesWithSelect = new ArrayList<String>();
			pickListTypesWithSelect.add(AMLCDDConstants.ISO_COUNTRY_LKUP);
			pickListTypesWithSelect.add(AMLCDDConstants.PERCENT_OF_WEALTH_CORROBORATED);
			pickListTypesWithSelect.add(AMLCDDConstants.CORROBORATION_RETAIL);
			pickListTypesWithSelect.add(AMLCDDConstants.SOURCE_OF_WEALTH);
			pickListTypesWithSelect.add(AMLCDDConstants.FINANCIAL_STATEMENTS_AVAILABLE);
			pickListTypesWithSelect.add(AMLCDDConstants.EXCHANGE_PICK_LIST);
			pickListTypesWithSelect.add(AMLCDDConstants.ISO_CURRENCY_LKUP);
			pickListTypesWithSelect.add(AMLCDDConstants.WEALTH_CREATION_ACTIVITY);
			pickListTypesWithSelect.add(AMLCDDConstants.INDUSTRY_TYPE);
			pickListTypesWithSelect.add(AMLCDDConstants.SOURCE_OF_FUNDS);
			pickListTypesWithSelect.add(AMLCDDConstants.TITLE);
			pickListTypesWithSelect.add(AMLCDDConstants.CONTRIB_INVEST_PORTFOLIO);
			pickListTypesWithSelect.add(AMLCDDConstants.INCOME_RANGE);
			pickListTypesWithSelect.add(AMLCDDConstants.SOW_RETAIL);
			pickListTypesWithSelect.add(AMLCDDConstants.PICKLIST_TYPE_RELATIONSHIP);
			if(AMLCDDConstants.MERCHANT_ENTITY.equalsIgnoreCase(eddVO.getClientType())
					|| AMLCDDConstants.RETAIL_ENTITY.equalsIgnoreCase(eddVO.getClientType())
					|| AMLCDDConstants.CARDS_ENTITY.equalsIgnoreCase(eddVO.getClientType())){
				pickListTypesWithSelect.add(AMLCDDConstants.ANNUAL_REVENUE);
				pickListTypesWithSelect.add(AMLCDDConstants.ANNUAL_REVENUE_EDD);
				pickListTypesWithSelect.add(AMLCDDConstants.NUMBER_OF_LOCATIONS);
				pickListTypesWithSelect.add(AMLCDDConstants.CLIENT_FUNDS);
				pickListTypesWithSelect.add(AMLCDDConstants.NO_OF_EMPLOYEES);
				pickListTypesWithSelect.add(AMLCDDConstants.ENTITY_TYPE);
				pickListTypesWithSelect.add(AMLCDDConstants.MEMBER_ASSOCIATION);
			}
			eddPickListWithSelectMap=super.getPickListWithSelect(pickListTypesWithSelect);	
			if(!(AMLCDDConstants.RETAIL_ENTITY.equalsIgnoreCase(eddVO.getClientType())))
			{
			filterSelectPickList(eddPickListWithSelectMap);
			}
			if(AMLCDDConstants.RETAIL_INDIV.equalsIgnoreCase(eddVO.getClientType()))
			{
				List<PickListLkUpVO> incomePickListVOs = eddPickListWithSelectMap.get(AMLCDDConstants.INCOME_RANGE);
				List<PickListLkUpVO> sortedIncomePickList = CommonUtility.sortPickListSelect(incomePickListVOs);
                eddPickListWithSelectMap.put(AMLCDDConstants.INCOME_RANGE,sortedIncomePickList);
			}
			if(AMLCDDConstants.MERCHANT_ENTITY.equalsIgnoreCase(eddVO.getClientType())
					|| AMLCDDConstants.RETAIL_ENTITY.equalsIgnoreCase(eddVO.getClientType())
					|| AMLCDDConstants.CARDS_ENTITY.equalsIgnoreCase(eddVO.getClientType()))
			{
				List<PickListLkUpVO> locationPickListVOs = eddPickListWithSelectMap.get(AMLCDDConstants.NUMBER_OF_LOCATIONS);
				List<PickListLkUpVO> sortedLocationPickList = CommonUtility.sortPickListSelect(locationPickListVOs);
                eddPickListWithSelectMap.put(AMLCDDConstants.NUMBER_OF_LOCATIONS,sortedLocationPickList);
				
				List<PickListLkUpVO> employeePickListVOs = eddPickListWithSelectMap.get(AMLCDDConstants.NO_OF_EMPLOYEES);
				List<PickListLkUpVO> sortedEmployeePickList = CommonUtility.sortPickListSelect(employeePickListVOs);
                eddPickListWithSelectMap.put(AMLCDDConstants.NO_OF_EMPLOYEES,sortedEmployeePickList);
			}
			model.addAttribute(AMLCDDConstants.EDD_SELECT_PICKLIST_MAP, eddPickListWithSelectMap);
			List<PickListLkUpVO> selectPicklist = amlCddCacheUtil.getPickListData(getUserContext().getKycCountryCode(), getLanguage(),  AMLCDDConstants.PICKLIST_SELECT_DD);
			if(selectPicklist != null && ! selectPicklist.isEmpty()){
				selectPicklist.get(0).setCode("");
			}
			model.addAttribute("selectPicklist", selectPicklist);
			eddVO = eddService.getEddDetails(eddVO,getLanguage());
			idTypeCustomerMap = eddService.getCustomerIdTypeMap(eddVO,getLanguage());
			idTypeMemberMap = eddService.getMemberIdTypeMap(eddVO,getLanguage());
			
			filterPickList(eddVO,eddPickListMap);
			
			model.addAttribute(AMLCDDConstants.EDD_PICKLIST_MAP, eddPickListMap);
			if(AMLCDDConstants.RETAIL_INDIV.equalsIgnoreCase(eddVO.getClientType())){
				eddVO.setCltTypeDisplayFlg("RI");
			}
			else if(AMLCDDConstants.RETAIL_ENTITY.equalsIgnoreCase(eddVO.getClientType())){
				eddVO.setCltTypeDisplayFlg("RE");
			}
			else if(AMLCDDConstants.CARDS_INDIV.equalsIgnoreCase(eddVO.getClientType())){
				eddVO.setCltTypeDisplayFlg("CI");
			}
			else if(AMLCDDConstants.CARDS_ENTITY.equalsIgnoreCase(eddVO.getClientType())){
				eddVO.setCltTypeDisplayFlg("CE");
			}
			else if(AMLCDDConstants.MERCHANT_ENTITY.equalsIgnoreCase(eddVO.getClientType())){
				eddVO.setCltTypeDisplayFlg("ME");
			}
			model.addAttribute(AMLCDDConstants.CUST_DEL_MSG, super.getScreenErrorMessage(AMLCDDConstants.INFO0023));
			model.addAttribute(AMLCDDConstants.SUPP_DEL_MSG, super.getScreenErrorMessage(AMLCDDConstants.INFO0024));
			model.addAttribute(AMLCDDConstants.DONOR_DEL_MSG, super.getScreenErrorMessage(AMLCDDConstants.INFO0025));
			model.addAttribute(AMLCDDConstants.ATLEAST_ONE_CHECKBOX, super.getScreenErrorMessage(AMLCDDConstants.ATLEAST_ONE_CHECKBOX));
			model.addAttribute(AMLCDDConstants.CUST_DEL_SEL_MSG, super.getScreenErrorMessage(AMLCDDConstants.INFO_CUST_DEL_MSG));
			model.addAttribute(AMLCDDConstants.SUPP_DEL_SEL_MSG, super.getScreenErrorMessage(AMLCDDConstants.INFO_SUPP_DEL_MSG));
			model.addAttribute(AMLCDDConstants.DONOR_DEL_SEL_MSG, super.getScreenErrorMessage(AMLCDDConstants.INFO_DONOR_DEL_MSG));
			model.addAttribute(AMLCDDConstants.CUST_DEL_SUCCESS_MSG, super.getScreenErrorMessage(AMLCDDConstants.CUST_DEL_SUCCESS_MSG));
			model.addAttribute(AMLCDDConstants.SUPP_DEL_SUCCESS_MSG, super.getScreenErrorMessage(AMLCDDConstants.SUPP_DEL_SUCCESS_MSG));
			model.addAttribute(AMLCDDConstants.DONOR_DEL_SUCCESS_MSG, super.getScreenErrorMessage(AMLCDDConstants.DONOR_DEL_SUCCESS_MSG));
			Map<String, UiLabelVO> eddUiLabels = super.getUiLabels(AMLCDDConstants.COMMON);
			model.addAttribute(AMLCDDConstants.EDD_UI_LABELS,eddUiLabels);
			// Added for Retail Entity MultiSelect 
			if(eddVO.getObjEddEntityDetailsVO()!=null){
				eddVO.getObjEddEntityDetailsVO().setMaxCountryMsg(super.getScreenErrorMessage(AMLCDDConstants.INFO0026));
			List<PickListLkUpVO> selectedCountryList=processMultiSelectValues(eddVO.getObjEddEntityDetailsVO().getCountriesOfPrimOpers(), AMLCDDConstants.PICKLIST_TYPE_ISO_COUNTRY_LKUP);
			eddVO.getObjEddEntityDetailsVO().setSelectedCountries(selectedCountryList);
			if(selectedCountryList.size() == 0){
				 eddVO.getObjEddEntityDetailsVO().setCountriesOfPrimOpers(new String[0]);
			}
			List<PickListLkUpVO> totalCountries = processMultiSelectTotalValues(AMLCDDConstants.PICKLIST_TYPE_ISO_COUNTRY_LKUP);
			//model.addAttribute("totalcountryList", totalCountries);
			eddVO.getObjEddEntityDetailsVO().setTotalCountries(totalCountries);
			}
			// For UBO memebers
			if(eddVO.getListEDDMemberVO()!=null && !eddVO.getListEDDMemberVO().isEmpty() && eddVO.getListEDDMemberVO().size()>0){
				for (EddMemberVO eddMemberVO : eddVO.getListEDDMemberVO()) {
					if(eddMemberVO.getIsUBO()!=null && AMLCDDConstants.Y.equalsIgnoreCase(eddMemberVO.getIsUBO())){
						List<PickListLkUpVO> selectedCorrobDocList=processMultiSelectValues(eddMemberVO.getCorrobWealthSrcTypes(), AMLCDDConstants.CORROBORATION_RETAIL);
						eddMemberVO.setSelectedCorrDocTypes(selectedCorrobDocList);
						if(selectedCorrobDocList.size() == 0){
							eddMemberVO.setCorrobWealthSrcTypes(new String[0]);
						}
						List<PickListLkUpVO> totalCorrobDocTypes = processMultiSelectTotalValues(AMLCDDConstants.CORROBORATION_RETAIL);
						eddMemberVO.setTotalCorrDocTypes(totalCorrobDocTypes);
						

						List<PickListLkUpVO> selectedSOWList=processMultiSelectValues(eddMemberVO.getSourceOfWealthTypes(), AMLCDDConstants.SOW_RETAIL);
						eddMemberVO.setSelectedSOWTypes(selectedSOWList);
						if(selectedSOWList.size() == 0){
							eddMemberVO.setSourceOfWealthTypes(new String[0]);
						}
						List<PickListLkUpVO> totalSOWTypes = processMultiSelectTotalValues(AMLCDDConstants.SOW_RETAIL);
						eddMemberVO.setTotalSOWTypes(totalSOWTypes);
					
					}
					else{
						eddMemberVO.setCorrobWealthSrcTypes(new String[0]);
						eddMemberVO.setSelectedCorrDocTypes(new ArrayList<>());
						eddMemberVO.setTotalCorrDocTypes(new ArrayList<>());
						eddMemberVO.setSelectedSOWTypes(new ArrayList<>());
						eddMemberVO.setSourceOfWealthTypes(new String[0]);
						eddMemberVO.setTotalSOWTypes(new ArrayList<>());
					}
				}
			}
		} catch (Exception e) {
			Map<String, String> errorDetails = new HashMap<String, String>();
			String errorCode = AMLCDDConstants.EXCEPTION_CODE;
			if(e instanceof AmlCddException){
				AmlCddException exp = (AmlCddException)e;
				if(exp.getExceptionDetails().getExceptionCode() != null && 
						exp.getExceptionDetails().getExceptionCode().trim().length() > 0){
					errorCode = exp.getExceptionDetails().getExceptionCode();
				}
			}
			errorDetails.put("ErrorInEddGet", super.getScreenErrorMessage(errorCode));
			eddVO.setErrorMessages(errorDetails);
			eddVO.setCurrFormStatus(AMLCDDConstants.INPROGRESS);
			logger.error("Error has occured in initEDDDetailsForm" + e.getMessage());
		}
		//if (CommonUtility.isNotNull(eddVO.getBusinessLine())
		//		&& eddVO.getBusinessLine().equalsIgnoreCase(AMLCDDConstants.Cards)) { // Commented for updating form status in on load for all businessline
			Map<String, String> mapWithQstAndErrorMsgs = new HashMap<String, String>();;
			try {
				List<String> errorMessages = eddValidator.validateEdd(eddVO, mapWithQstAndVo,getUserContext().getDefaultLanguage(),getUserContext().getKycCountryCode());
				for (String errorMessage : errorMessages) {
					mapWithQstAndErrorMsgs.put(errorMessage, errorMessage);
				}
			} catch (ParseException e) {
				logger.error("Error has occured in cards validation" + e.getMessage());
				
			}
			mapWithQstAndErrorMsgs.remove(null);
			mapWithQstAndErrorMsgs.remove(null, null);
			if (mapWithQstAndErrorMsgs != null && mapWithQstAndErrorMsgs.size() > 0) {
				eddVO.setErrorMessages(mapWithQstAndErrorMsgs);
				eddVO.setEddStatus(AMLCDDConstants.INCOMPLETE);
				eddVO.setCurrFormStatus(AMLCDDConstants.INPROGRESS);
				logger.info(" Edd form status incomplete ");
			} else if (mapWithQstAndErrorMsgs == null || mapWithQstAndErrorMsgs.isEmpty()) {
				eddVO.setEddStatus(AMLCDDConstants.COMPLETED);
				eddVO.setCurrFormStatus(AMLCDDConstants.COMPLETED);
				logger.info(" Edd form status complete ");
			}
			model.addAttribute("eddFormStatus", eddVO.getCurrFormStatus());
		//}
		model.addAttribute(AMLCDDConstants.EDD_FORM_DATA, eddVO);
		model.addAttribute(AMLCDDConstants.ID_TYPE_CUST_MAP, idTypeCustomerMap);
		model.addAttribute(AMLCDDConstants.ID_TYPE_MEMB_MAP, idTypeMemberMap);
		model.addAttribute("isAutorize",super.isAuthorize("FUNCTION.CD.EDD_SAVE"));		
		logger.info("Exit initEDDDetailsForm for Control Number " + eddVO.getCddControlNumber());
		return AMLCDDConstants.EDD_FORM_RETURN_PAGE;
	}

	private List<PickListLkUpVO> processMultiSelectValues(String[] selectedValues, String picklistTypeIsoCountryLkup) {
		List<PickListLkUpVO> selectedCountryList = new ArrayList<>();
		if(selectedValues!= null){
			
			List<PickListLkUpVO> countries = getPickList(picklistTypeIsoCountryLkup);
			if(countries != null && selectedValues != null && selectedValues.length > 0){
				for(String countryCode : selectedValues){
					PickListLkUpVO vo = new PickListLkUpVO();
					vo.setCode(countryCode);
					if(countries.contains(vo)){
						selectedCountryList.add(countries.get(countries.indexOf(vo)));
					}
				}
			}
		}
		return selectedCountryList;
				
	}

	private List<PickListLkUpVO> processMultiSelectTotalValues(String pickListType) {
		List<PickListLkUpVO> totalCountries = getPickList(pickListType);
		if(!CollectionUtils.isEmpty(totalCountries)){
			Iterator<PickListLkUpVO> itr = totalCountries.iterator();
			while(itr.hasNext()){
				PickListLkUpVO vo = itr.next();
				if(vo != null && !StringUtils.hasText(vo.getCode())){
					itr.remove();
				}
				/*if(selectedCountryList.contains(vo)){
					itr.remove();
				}*/
			}
		}else{
			totalCountries = new ArrayList<>();
		}
		return totalCountries;
	}
	/**
	 * Method Name: filterPickList
	 * Description: Method to perform <Details>
	 * @param eddPickListMap 
	 * @param eddVO 
	 * @return void
	 * @param 
	 * 
	 */
	private void filterPickList(EddVO eddVO, Map<String, List<PickListLkUpVO>> eddPickListMap) {
		List<PickListLkUpVO> editedSowPickList=new ArrayList<PickListLkUpVO>(); 
		if(eddVO.getObjEddSowVO()!=null && eddVO.getObjEddSowVO().getSowType()!=null 
				&& !eddVO.getObjEddSowVO().getSowType().isEmpty() && 
				eddVO.getObjEddSowVO().getSowType().size()>0){
			List<PickListLkUpVO> pickListVOs =eddPickListMap.get(AMLCDDConstants.SOW_RETAIL);
			
			List<String> sowPickList=eddVO.getObjEddSowVO().getSowType();
			for (PickListLkUpVO pickListLkUpVO : pickListVOs) {
				if(sowPickList.contains(pickListLkUpVO.getCode())){
					editedSowPickList.add(pickListLkUpVO);
					
				}
		}
			//eddPickListMap.put(AMLCDDConstants.SOW_RETAIL,editedSowPickList);
		}
		eddPickListMap.put(AMLCDDConstants.SOW_RETAIL,editedSowPickList);
	}
	
	/**
	 * Method Name: filterPickList 
	 * Description: This method is used to fetch
	 * only two SOW types needed for investment SOW
	 * @param eddPickListMap
	 * @param eddVO
	 * @return void
	 * @param
	 * 
	 */
	private void filterSelectPickList(Map<String, List<PickListLkUpVO>> eddPickListMap) {
		List<PickListLkUpVO> editedSowPickList = new ArrayList<PickListLkUpVO>();
		List<PickListLkUpVO> pickListVOs = eddPickListMap.get(AMLCDDConstants.SOW_RETAIL);

		for (PickListLkUpVO pickListLkUpVO : pickListVOs) {
			if ((pickListLkUpVO.getCode().equalsIgnoreCase(AMLCDDConstants.INHERT))
					|| (pickListLkUpVO.getCode().equalsIgnoreCase(AMLCDDConstants.INVTRSTFND))
					|| (pickListLkUpVO.getCode().equalsIgnoreCase(AMLCDDConstants.EMPTY_STRING))) {
				editedSowPickList.add(pickListLkUpVO);

			}
		}
		eddPickListMap.put(AMLCDDConstants.SOW_RETAIL, editedSowPickList);
	}
	

	@RequestMapping(value = "/saveEdd", method = RequestMethod.POST)
	@ResponseBody
	public String saveEddDetails(@RequestBody EddVO eddVO, @ModelAttribute("model") ModelMap model) {
		logger.info("saveEddDetails for control number " + eddVO.getCddControlNumber());
		String jsonString = "";
		eddVO.setCurrScreenName(ScreenNameEnum.EDD.getScreenName());
		eddVO.setActionDoneByUser(super.getLoggedinUserId());
		eddVO.setActionDoneByRole(getUserContext().getRoleId());
		eddVO.setFormName(ScreenNameEnum.EDD);
		eddVO.setActionEvent(AuditLogActionEventEnum.CDD_EDD_SAVE);
		eddVO.setCountry(getUserContext().getKycCountryCode());
		Map<String, FormQuestionRenderVO> mapWithQstAndVo = super.getFormQuestionDetails(eddVO);
		String formCompletionStatus="";
		try {
			logger.info("Inside Edd Controller Save Entity  " + eddVO.getCddControlNumber());
			if(eddVO!=null && eddVO.getObjEddEntityDetailsVO()!=null ){
			logger.info("Inside apacConversionVotoEddEntity for Control Number " + eddVO.getCddControlNumber()+ "Aml Prgram Dtls VO:" +eddVO.getObjEddEntityDetailsVO().getClientAmlProgram());
			}
			eddService.saveEddDetails(eddVO,getUserCountry(),getLanguage());
			logger.info("Inside Edd Controller After Save Entity  " + eddVO.getCddControlNumber());
			if(eddVO!=null && eddVO.getObjEddEntityDetailsVO()!=null ){
			logger.info("Inside apacConversionVotoEddEntity for Control Number " + eddVO.getCddControlNumber()+ "Aml Prgram Dtls VO:" +eddVO.getObjEddEntityDetailsVO().getClientAmlProgram());
			}
			resetSowVOAfterSave(eddVO);
			EddVO eddResultVO = eddService.getEddDetails(eddVO,getLanguage());
			List<String> errorMessages = eddValidator.validateEdd(eddResultVO, mapWithQstAndVo,getUserContext().getDefaultLanguage(),getUserContext().getKycCountryCode());
			
			logger.info("Inside Edd Controller Save Get Entity  " + eddResultVO.getCddControlNumber());
			if(eddResultVO!=null && eddResultVO.getObjEddEntityDetailsVO()!=null ){
			logger.info("Inside apacConversionVotoEddEntity for Control Number " + eddResultVO.getCddControlNumber()+ "Aml Prgram Dtls VO:" +eddResultVO.getObjEddEntityDetailsVO().getClientAmlProgram());
			}
			
			Map<String, String> mapWithQstAndErrorMsgs=new HashMap<String, String>();
			for (String errorMessage : errorMessages) {
				mapWithQstAndErrorMsgs.put(errorMessage, errorMessage);
			}
			List<KycEddMapEntity> custSupplList=eddService.getEddMappingDetailsList(eddResultVO.getCddControlNumber(), eddResultVO.getCountry(), eddResultVO.getCustNumber());
			if (custSupplList!=null && !custSupplList.isEmpty() && custSupplList.size()>0){
				KycEddMapDtlsVO kycEddMapDtlsVO=new KycEddMapDtlsVO();
				for (KycEddMapEntity kycEddMapEntity : custSupplList) {
					BeanUtils.copyProperties(kycEddMapDtlsVO, kycEddMapEntity);
					List<String> custSupplErrMessages	=eddValidator.validateEddMappingDtls(kycEddMapDtlsVO, mapWithQstAndVo, getUserContext().getDefaultLanguage(),getUserContext().getKycCountryCode());
					if(custSupplErrMessages!=null && !custSupplErrMessages.isEmpty() && custSupplErrMessages.size()>0){
						eddResultVO.setEddStatus(AMLCDDConstants.INCOMPLETE);
						eddVO.setCurrFormStatus(AMLCDDConstants.INPROGRESS);
						for (String errorMessage : custSupplErrMessages) {
							mapWithQstAndErrorMsgs.put(errorMessage, errorMessage);
						}
						eddResultVO.setErrorMessages(mapWithQstAndErrorMsgs);
						//break;
					}
					
				}
			}
			mapWithQstAndErrorMsgs.remove(null);
			mapWithQstAndErrorMsgs.remove(null, null);
			String saveSuccessMsg = super.getScreenErrorMessage(AMLCDDConstants.EDD_SAVE_SUCCESS_MSG);
			if (mapWithQstAndErrorMsgs != null && mapWithQstAndErrorMsgs.size() > 0) {
				eddResultVO.setErrorMessages(mapWithQstAndErrorMsgs);
				eddResultVO.setEddStatus(AMLCDDConstants.INCOMPLETE);
				eddVO.setCurrFormStatus(AMLCDDConstants.INPROGRESS);
				//formCompletionStatus = cddService.updateFormCompletionStatus(eddVO, super.getLoggedinUserId());
				formCompletionStatus = amendFormCompletionStatus(eddVO);
				logger.info(" Edd form status incomplete ");
			} else if (mapWithQstAndErrorMsgs == null || mapWithQstAndErrorMsgs.isEmpty()) {
				eddResultVO.setErrorMessages(mapWithQstAndErrorMsgs);
				eddResultVO.setEddStatus(AMLCDDConstants.COMPLETED);
				eddVO.setCurrFormStatus(AMLCDDConstants.COMPLETED);
				/*List<KycEddMapEntity> custSupplList=eddService.getEddMappingDetailsList(eddResultVO.getCddControlNumber(), eddResultVO.getCountry(), eddResultVO.getCustNumber());
				if (custSupplList!=null && !custSupplList.isEmpty() && custSupplList.size()>0){
					KycEddMapDtlsVO kycEddMapDtlsVO=new KycEddMapDtlsVO();
					for (KycEddMapEntity kycEddMapEntity : custSupplList) {
						BeanUtils.copyProperties(kycEddMapDtlsVO, kycEddMapEntity);
						List<String> custSupplErrMessages	=eddValidator.validateEddMappingDtls(kycEddMapDtlsVO, mapWithQstAndVo, getUserContext().getDefaultLanguage(),getUserContext().getKycCountryCode());
						if(custSupplErrMessages!=null && !custSupplErrMessages.isEmpty() && custSupplErrMessages.size()>0){
							eddResultVO.setEddStatus(AMLCDDConstants.INCOMPLETE);
							eddVO.setCurrFormStatus(AMLCDDConstants.INPROGRESS);
							eddResultVO.setErrorMessages(mapWithQstAndErrorMsgs);
							break;
						}
						
					}
				}*/
				
				//formCompletionStatus = cddService.updateFormCompletionStatus(eddVO, super.getLoggedinUserId());
				formCompletionStatus = amendFormCompletionStatus(eddVO);
				logger.info(" Edd form status complete ");
			}
			eddResultVO.setFormCompletionStatus(formCompletionStatus);
			/*START-CHANGE/RAJARAJAN/05JUL2018/629*/
			//mapWithQstAndErrorMsgs.put("successfullySavedMsg", saveSuccessMsg);
			/*END-CHANGE/RAJARAJAN/05JUL2018/629*/
			jsonString = new ObjectMapper().writeValueAsString(eddResultVO);
		} catch (Exception exception) {
			try {
				eddVO.setCurrFormStatus(AMLCDDConstants.INPROGRESS);
				//formCompletionStatus = cddService.updateFormCompletionStatus(eddVO, super.getLoggedinUserId());
				formCompletionStatus = amendFormCompletionStatus(eddVO);
				eddVO.setFormCompletionStatus(formCompletionStatus);
				Map<String, String> errorDetails = new HashMap<String, String>();
				String errorCode = AMLCDDConstants.EXCEPTION_CODE;
				if(exception instanceof AmlCddException){
					AmlCddException exp = (AmlCddException)exception;
					if(exp.getExceptionDetails().getExceptionCode() != null && 
							exp.getExceptionDetails().getExceptionCode().trim().length() > 0){
						errorCode = exp.getExceptionDetails().getExceptionCode();
					}
				}
				errorDetails.put("ErrorInEddGet", super.getScreenErrorMessage(errorCode));
				eddVO.setErrorMessages(errorDetails);
				jsonString = new ObjectMapper().writeValueAsString(eddVO);
				logger.error("Error while retriving EDD" + exception.getMessage());
			} catch (JsonProcessingException e) {
				logger.error("Error while retriving EDD" + e.getMessage());
			}
		}
		return jsonString;
	}

	/**
	 * Method Name: resetSowVOAfterSave
	 * Description: Method to perform reset SOWVos after Save
	 * @return void
	 * @param EddVO eddVO
	 * 
	 */
	private void resetSowVOAfterSave(EddVO eddVO) {
		if(AMLCDDConstants.Y.equalsIgnoreCase(eddVO.getIsCompanyProf())){
			EddSowCompanyProfitsVO companyProfitsVO=new EddSowCompanyProfitsVO();
			eddVO.getObjEddSowVO().setObjEddSowCompanyProfitsVO(companyProfitsVO);
			}
			if(AMLCDDConstants.Y.equalsIgnoreCase(eddVO.getIsSalary())){
			 EddSowSalaryVO eddSowSalaryVO=new EddSowSalaryVO();
			 eddVO.getObjEddSowVO().setObjEddSowSalaryVO(eddSowSalaryVO);
			}
			if(AMLCDDConstants.Y.equalsIgnoreCase(eddVO.getIsInheritance())){
			 EddSowInheritanceVO objEddSowInheritanceVO=new EddSowInheritanceVO();
			 eddVO.getObjEddSowVO().setObjEddSowInheritanceVO(objEddSowInheritanceVO);
			}
			if(AMLCDDConstants.Y.equalsIgnoreCase(eddVO.getIsInvestment())){
			 EddSowInvestmentVO objEddSowInvestmentVO=new EddSowInvestmentVO();
			 eddVO.getObjEddSowVO().setObjEddSowInvestmentVO(objEddSowInvestmentVO);
			}
			if(AMLCDDConstants.Y.equalsIgnoreCase(eddVO.getIsOther())){
			 EddSowOtherTypeVO objEddSowOtherTypeVO=new EddSowOtherTypeVO();
			 eddVO.getObjEddSowVO().setObjEddSowOtherTypeVO(objEddSowOtherTypeVO);
			}					
	}
	
	@RequestMapping(value = "/upload", method = RequestMethod.POST)
	@ResponseBody
   public ResponseVO getAttachment(HttpServletResponse response, 
	@RequestParam("controlNbr") String controlNbr, @RequestParam("customerNbr") String customerNbr, 
	@RequestParam("country") String country, @RequestParam("sectionNm") String sectionNm) { 
	logger.info("Received request for file upload.");
	 ResponseVO responseVO=new ResponseVO();
     try {
    	
    	
    	 List<KycAttachmentEntity> attachmentEntity =eddService.getAttachment(customerNbr,controlNbr,country,sectionNm);
    	 responseVO.setAttachments(attachmentEntity);
    	 responseVO.setStatus(AMLCDDConstants.SUCCESS);
		    responseVO.setMessage("Document uploaded successfully.");
    } catch (Exception e) {
        responseVO.setStatus(AMLCDDConstants.FAILED);
	    //responseVO.setMessage();
    }
    
	return responseVO;
 
  }
	
	@RequestMapping(value = "/getUIValues", method = RequestMethod.POST)
    public @ResponseBody EddVO getUIValues() {
		logger.info("Inside the Class: EddController ---> method: getUIValues");
		EddVO eddVO = new EddVO();
		try{
		String empStartYearValMsg = super.getScreenErrorMessage(AMLCDDConstants.EMP_START_YEAR_VALIDATION);
		String empEndYearValMsg = super.getScreenErrorMessage(AMLCDDConstants.EMP_END_YEAR_VALIDATION);
		EddSowSalaryVO eddSowSalaryVO = new EddSowSalaryVO();
		eddSowSalaryVO.setEmpStartYearValMsg(empStartYearValMsg);
		eddSowSalaryVO.setEmpEndYearValMsg(empEndYearValMsg);
		EddSowVO eddSowVO = new EddSowVO();
		eddSowVO.setObjEddSowSalaryVO(eddSowSalaryVO);
		eddVO.setObjEddSowVO(eddSowVO);
		}
		catch (Exception e) {
			String errorMsg = super.getScreenErrorMessage(AMLCDDConstants.EXCEPTION_CODE);
			Map<String, String> errorDetails = new HashMap<String, String>();
			errorDetails.put("ErrorInEdd getUIValues", "Error has occured."+errorMsg);
			eddVO.setErrorMessages(errorDetails);
			logger.error("Error on checkerUpdate: "+e.getMessage());
		}
		
	    logger.info("Exits the Class: EddController ---> method: getUIValues");
		return eddVO;
    }
	@GetMapping("/addTopFiveCustomers")
    public String addTopFiveCustomers(@ModelAttribute("model") ModelMap model,
			@RequestParam("countryCode") String countryCode, @RequestParam("controlNumber") String controlNumber,
			@RequestParam("custNumber") String custNumber, @RequestParam("businessLine") String businessLine,
			@RequestParam("custType") String custType, @RequestParam("riskRating") String riskRating,
			@RequestParam("formVersion") String formVersion, @RequestParam("cddType") String cddType,
			@RequestParam("mapType") String mapType) {
		logger.info("Inside the Class: EddController ---> method: addTopFiveCustomers");
		CddBaseVO baseVO = new CddBaseVO();
		baseVO.setCountry(countryCode);
		baseVO.setBusinessLine(businessLine);
		baseVO.setCddType(cddType);
		baseVO.setClientType(custType);
		baseVO.setFormRiskRating(riskRating);
		baseVO.setFormVersion(Integer.parseInt(formVersion));
		baseVO.setCurrScreenName(AMLCDDConstants.EDD);
		Map<String, FormQuestionRenderVO> mapWithQstAndVo = super.getFormQuestionDetails(baseVO);
		
		model.addAttribute(AMLCDDConstants.EDD_FORM_QUESTIONS, mapWithQstAndVo);
		model.addAttribute(AMLCDDConstants.COUNTRY_CODE, countryCode);
		model.addAttribute(AMLCDDConstants.CONTROL_NUMBER, controlNumber);
		model.addAttribute(AMLCDDConstants.PUP_CUSTOMER_NBR_VAR, custNumber);
		model.addAttribute(AMLCDDConstants.BUSS_LINE, businessLine);
		model.addAttribute(AMLCDDConstants.CUST_TYPE, custType);
		model.addAttribute(AMLCDDConstants.CLIENT_TYPE, custType);
		model.addAttribute(AMLCDDConstants.UPLOAD_CDD_TYPE, cddType);
		model.addAttribute(AMLCDDConstants.RISK_RATING, riskRating);
		model.addAttribute(AMLCDDConstants.FORM_VERSION, formVersion);
		Map<String, UiLabelVO> eddUiLabels = super.getUiLabels(AMLCDDConstants.COMMON);
		model.addAttribute(AMLCDDConstants.EDD_UI_LABELS,eddUiLabels);
		if(AMLCDDConstants.EDD_CUST.equalsIgnoreCase(mapType)){
		model.addAttribute(AMLCDDConstants.EDD_MAP_TYPE,AMLCDDConstants.TOP_5_CUST);
		}else if(AMLCDDConstants.EDD_SUPP.equalsIgnoreCase(mapType)){
		model.addAttribute(AMLCDDConstants.EDD_MAP_TYPE,AMLCDDConstants.TOP_5_SUPP);
		}else if(AMLCDDConstants.EDD_DONOR.equalsIgnoreCase(mapType)){
			model.addAttribute(AMLCDDConstants.EDD_MAP_TYPE,"DONOR");
		}
		List<String> pickListTypesWithSelect= new ArrayList<String>();
		pickListTypesWithSelect.add(AMLCDDConstants.ISO_COUNTRY_LKUP);
		pickListTypesWithSelect.add(AMLCDDConstants.ENTITY_TYPE);
		Map<String, List<PickListLkUpVO>> eddPickListWithSelectMap = super.getPickListWithSelect(pickListTypesWithSelect);
		model.addAttribute(AMLCDDConstants.EDD_SELECT_PICKLIST_MAP, eddPickListWithSelectMap);
		
		return "topFiveCustomerDetailsPopup";
    }
	@PostMapping("/saveTopFiveCustomerDetails")
	@ResponseBody
    public String saveTopFiveCustomerDetails(@ModelAttribute KycEddMapDtlsVO kycEddMapDtlsVO) {
		logger.info("Inside the Class: EddController ---> method: saveTopFiveCustomerDetails");
		String jsonString = "";
		String formCompletionStatus="";
		kycEddMapDtlsVO.setCurrScreenName(ScreenNameEnum.EDD.getScreenName());
		kycEddMapDtlsVO.setActionDoneByUser(super.getLoggedinUserId());
		kycEddMapDtlsVO.setActionDoneByRole(getUserContext().getRoleId());
		kycEddMapDtlsVO.setFormName(ScreenNameEnum.EDD);
		kycEddMapDtlsVO.setActionEvent(AuditLogActionEventEnum.CDD_EDD_SAVE);
		kycEddMapDtlsVO.setCountry(getUserContext().getKycCountryCode());
		Map<String, FormQuestionRenderVO> mapWithQstAndVo = super.getFormQuestionDetails(kycEddMapDtlsVO);
		String saveSuccessMsg="";
		String donorMsg="";
		try {
			if(CommonUtility.isNotNull(kycEddMapDtlsVO.getMapVal())){
				eddService.saveEddMappingDetails(kycEddMapDtlsVO);
				if(AMLCDDConstants.TOP_5_CUST.equalsIgnoreCase(kycEddMapDtlsVO.getMapType())){
					saveSuccessMsg = super.getScreenErrorMessage(AMLCDDConstants.INFO0020);
				}else if(AMLCDDConstants.TOP_5_SUPP.equalsIgnoreCase(kycEddMapDtlsVO.getMapType())){
					saveSuccessMsg = super.getScreenErrorMessage(AMLCDDConstants.INFO0021);
				}
			}
			else if(AMLCDDConstants.DONOR.equalsIgnoreCase(kycEddMapDtlsVO.getMapType())){
				if(CommonUtility.isNotNull(kycEddMapDtlsVO.getDonorName()) || CommonUtility.isNotNull(kycEddMapDtlsVO.getFundsProvided()) || CommonUtility.isNotNull(kycEddMapDtlsVO.getCntryOfResidence())){
				eddService.saveEddMappingDetails(kycEddMapDtlsVO);
				saveSuccessMsg = /*"Donor Details Saved Successfully"*/super.getScreenErrorMessage(AMLCDDConstants.INFO0022);
				}
				else{
					if(mapWithQstAndVo.containsKey(FLD_NM_OF_DNR_EDD_RE)){
					donorMsg=mapWithQstAndVo.get(FLD_NM_OF_DNR_EDD_RE)==null?"":mapWithQstAndVo.get(FLD_NM_OF_DNR_EDD_RE).getFormLabel();
					}
				}
			}
			
			List<String> errorMessages = eddValidator.validateEddMappingDtls(kycEddMapDtlsVO, mapWithQstAndVo,getUserContext().getDefaultLanguage(),getUserContext().getKycCountryCode());
			
			Map<String, String> mapWithQstAndErrorMsgs=new HashMap<String, String>();
			for (String errorMessage : errorMessages) {
				mapWithQstAndErrorMsgs.put(errorMessage, errorMessage);
			}
			mapWithQstAndErrorMsgs.remove(null);
			mapWithQstAndErrorMsgs.remove(null, null);
			if (mapWithQstAndErrorMsgs != null && mapWithQstAndErrorMsgs.size() > 0) {
				kycEddMapDtlsVO.setErrorMessages(mapWithQstAndErrorMsgs);
				kycEddMapDtlsVO.setCurrFormStatus(AMLCDDConstants.INPROGRESS);
				//formCompletionStatus = cddService.updateFormCompletionStatus(kycEddMapDtlsVO, super.getLoggedinUserId());
				formCompletionStatus = amendFormCompletionStatus(kycEddMapDtlsVO);
				logger.info(" Edd form status incomplete ");
			} else if (mapWithQstAndErrorMsgs == null || mapWithQstAndErrorMsgs.isEmpty()) {
				kycEddMapDtlsVO.setCurrFormStatus(AMLCDDConstants.COMPLETED);
				//formCompletionStatus = cddService.updateFormCompletionStatus(kycEddMapDtlsVO, super.getLoggedinUserId());
				formCompletionStatus = amendFormCompletionStatus(kycEddMapDtlsVO);
				logger.info(" Edd form status complete ");
			}
			if(!CommonUtility.isEmptyString(donorMsg)){
				mapWithQstAndErrorMsgs.put("donor", donorMsg);
				kycEddMapDtlsVO.setErrorMessages(mapWithQstAndErrorMsgs);
				}
			if(CommonUtility.isNotNull(saveSuccessMsg)){
			mapWithQstAndErrorMsgs.put("successfullySavedMsg", saveSuccessMsg);
			
			kycEddMapDtlsVO.setErrorMessages(mapWithQstAndErrorMsgs);
			}
			jsonString = new ObjectMapper().writeValueAsString(kycEddMapDtlsVO);
		} catch (Exception exception) {
			try {
				kycEddMapDtlsVO.setCurrFormStatus(AMLCDDConstants.INPROGRESS);
				//formCompletionStatus = cddService.updateFormCompletionStatus(kycEddMapDtlsVO, super.getLoggedinUserId());
				formCompletionStatus = amendFormCompletionStatus(kycEddMapDtlsVO);
				kycEddMapDtlsVO.setFormCompletionStatus(formCompletionStatus);
				Map<String, String> errorDetails = new HashMap<String, String>();
				String errorCode = AMLCDDConstants.EXCEPTION_CODE;
				if(exception instanceof AmlCddException){
					AmlCddException exp = (AmlCddException)exception;
					if(exp.getExceptionDetails().getExceptionCode() != null && 
							exp.getExceptionDetails().getExceptionCode().trim().length() > 0){
						errorCode = exp.getExceptionDetails().getExceptionCode();
					}
				}
				errorDetails.put("ErrorInEddGet", super.getScreenErrorMessage(errorCode));
				kycEddMapDtlsVO.setErrorMessages(errorDetails);
				jsonString = new ObjectMapper().writeValueAsString(kycEddMapDtlsVO);
				logger.error("Error while retriving EDD" + exception.getMessage());
			} catch (JsonProcessingException e) {
				logger.error("Error while retriving EDD" + e.getMessage());
			}
		}
		return jsonString;
    }
	@PostMapping("/deleteTopFiveCustomers")
	@ResponseBody
    public void deleteTopFiveCustomers(@RequestParam("deletedTopFiveCustomersIds") String deletedTopFiveCustomersIds) throws IllegalAccessException, InvocationTargetException {
		logger.info("Inside the Class: EddController ---> method: deleteTopFiveCustomers ");
		String arrDeletedTopFiveCustomersIds[] = deletedTopFiveCustomersIds.split("~");
		List<String> lstDeletedTopFiveCustomersIds = Arrays.asList(arrDeletedTopFiveCustomersIds);
		eddService.deleteEddMappingDetails(lstDeletedTopFiveCustomersIds);
    }
	@PostMapping("/getTopFiveCustomersSuccessMsg")
	@ResponseBody
	public String getTopFiveCustomersSuccessMsg(@RequestParam("mapType") String mapType) {
		logger.info("Inside the Class: EddController ---> method: getTopFiveCustomersSuccessMsg ");
		String topFiveCustomersSuccessMsg="";
		if(AMLCDDConstants.TOP_5_CUST.equalsIgnoreCase(mapType)){
			 topFiveCustomersSuccessMsg = super.getScreenErrorMessage(AMLCDDConstants.INFO0020);
		}else if(AMLCDDConstants.TOP_5_SUPP.equalsIgnoreCase(mapType)){
		 topFiveCustomersSuccessMsg = super.getScreenErrorMessage(AMLCDDConstants.INFO0021);
		}
		return topFiveCustomersSuccessMsg;
	}
	
	@GetMapping("/getTopFiveCustSuppliers")
	@ResponseBody
	public List<KycEddMapEntity> getTopFiveCustomers(@RequestParam("countryCode") String countryCode,
			@RequestParam("controlNumber") String controlNumber, @RequestParam("customerNumber") String customerNumber,
			@RequestParam("mapType") String mapType
			/*,	@RequestParam("pageNo") int pageNo*/) {
		logger.info("Inside the Class: EddController ---> method: getTopFiveCustomers ");
		List<KycEddMapDtlsVO> lstKycEddMapDtlsVO=null;
		
	//	KycEddMapGridVo kycEddMapGridVo = new KycEddMapGridVo();
		List<KycEddMapEntity> entityList=null;
		List<String> mapList=new ArrayList<String>();
		mapList.add(mapType);
		try {
		 entityList=	eddService.getEddMappingDetails(/*pageNo,*/controlNumber, countryCode, customerNumber, mapType,getLanguage());
		} catch (Exception e) {
			logger.error("Exception in the method -->getUploadDocDetails: " + e);
		}
		//return kycEddMapGridVo;
		return entityList;
	}
	
	@GetMapping("/editTopFiveCustomer")
	public String editTopFiveCustomer(@ModelAttribute("model") ModelMap model,
			@RequestParam("countryCode") String countryCode, @RequestParam("controlNumber") String controlNumber,
			@RequestParam("custNumber") String custNumber, @RequestParam("businessLine") String businessLine,
			@RequestParam("custType") String custType, @RequestParam("riskRating") String riskRating,
			@RequestParam("formVersion") String formVersion, @RequestParam("cddType") String cddType,
			@RequestParam("lbqMapId") String lbqMapId) {
		String successPage="topFiveCustomerDetailsPopup";
		logger.info("Inside the Class: EddController ---> method: editTopFiveCustomer ");
		KycEddMapDtlsVO kycEddMapDtlsVO = new KycEddMapDtlsVO();
		kycEddMapDtlsVO.setCddControlNumber(controlNumber);
		kycEddMapDtlsVO.setCustNumber(custNumber);
		kycEddMapDtlsVO.setCountry(countryCode);
		kycEddMapDtlsVO.setBusinessLine(businessLine);
		kycEddMapDtlsVO.setCddType(cddType);
		kycEddMapDtlsVO.setClientType(custType);
		kycEddMapDtlsVO.setFormRiskRating(riskRating);
		kycEddMapDtlsVO.setFormVersion(Integer.parseInt(formVersion));
		kycEddMapDtlsVO.setCurrScreenName(AMLCDDConstants.EDD);
		Map<String, FormQuestionRenderVO> mapWithQstAndVo = super.getFormQuestionDetails(kycEddMapDtlsVO);
		model.addAttribute(AMLCDDConstants.EDD_FORM_QUESTIONS, mapWithQstAndVo);
		model.addAttribute(AMLCDDConstants.COUNTRY_CODE, countryCode);
		model.addAttribute(AMLCDDConstants.CONTROL_NUMBER, controlNumber);
		model.addAttribute(AMLCDDConstants.PUP_CUSTOMER_NBR_VAR, custNumber);
		model.addAttribute(AMLCDDConstants.BUSS_LINE, businessLine);
		model.addAttribute(AMLCDDConstants.CUST_TYPE, custType);
		model.addAttribute(AMLCDDConstants.CLIENT_TYPE, custType);
		model.addAttribute(AMLCDDConstants.UPLOAD_CDD_TYPE, cddType);
		model.addAttribute(AMLCDDConstants.RISK_RATING, riskRating);
		model.addAttribute(AMLCDDConstants.FORM_VERSION, formVersion);
		model.addAttribute("lbqMapId", lbqMapId);
		Map<String, UiLabelVO> eddUiLabels = super.getUiLabels(AMLCDDConstants.COMMON);
		model.addAttribute(AMLCDDConstants.EDD_UI_LABELS,eddUiLabels);
		List<String> pickListTypesWithSelect= new ArrayList<String>();
		pickListTypesWithSelect.add(AMLCDDConstants.ISO_COUNTRY_LKUP);
		pickListTypesWithSelect.add(AMLCDDConstants.ENTITY_TYPE);
		Map<String, List<PickListLkUpVO>> eddPickListWithSelectMap = super.getPickListWithSelect(pickListTypesWithSelect);
		model.addAttribute(AMLCDDConstants.EDD_SELECT_PICKLIST_MAP, eddPickListWithSelectMap);
		
		kycEddMapDtlsVO.setLbqMapId(lbqMapId);
		kycEddMapDtlsVO= eddService.getEddMapByMapId(kycEddMapDtlsVO);
		if(kycEddMapDtlsVO!=null){
			model.addAttribute("eddMapType",kycEddMapDtlsVO.getMapType());
		}
		model.addAttribute("kycEddMapDtlsVO", kycEddMapDtlsVO);
		if(AMLCDDConstants.DONOR.equalsIgnoreCase(kycEddMapDtlsVO.getMapType())){
			successPage="donorDetailsPopUp";
		}
		return successPage;
	}
	
	
	@GetMapping("/dialogPopUp")
    public String dialogPopUp(@ModelAttribute("model") ModelMap model,
			@RequestParam("countryCode") String countryCode, @RequestParam("controlNumber") String controlNumber,
			@RequestParam("custNumber") String custNumber, @RequestParam("businessLine") String businessLine,
			@RequestParam("custType") String custType, @RequestParam("riskRating") String riskRating,
			@RequestParam("formVersion") String formVersion, @RequestParam("cddType") String cddType,
			@RequestParam("mapType") String mapType) {
		
		KycEddMapDtlsVO kycEddMapDtlsVO = new KycEddMapDtlsVO();
		kycEddMapDtlsVO.setCddControlNumber(controlNumber);
		kycEddMapDtlsVO.setCustNumber(custNumber);
		kycEddMapDtlsVO.setCountry(countryCode);
		kycEddMapDtlsVO.setBusinessLine(businessLine);
		kycEddMapDtlsVO.setCddType(cddType);
		kycEddMapDtlsVO.setClientType(custType);
		kycEddMapDtlsVO.setFormRiskRating(riskRating);
		kycEddMapDtlsVO.setFormVersion(Integer.parseInt(formVersion));
		kycEddMapDtlsVO.setCurrScreenName(AMLCDDConstants.EDD);
		Map<String, FormQuestionRenderVO> mapWithQstAndVo = super.getFormQuestionDetails(kycEddMapDtlsVO);
		model.addAttribute(AMLCDDConstants.EDD_FORM_QUESTIONS, mapWithQstAndVo);
		model.addAttribute(AMLCDDConstants.COUNTRY_CODE, countryCode);
		model.addAttribute(AMLCDDConstants.CONTROL_NUMBER, controlNumber);
		model.addAttribute(AMLCDDConstants.PUP_CUSTOMER_NBR_VAR, custNumber);
		model.addAttribute(AMLCDDConstants.BUSS_LINE, businessLine);
		model.addAttribute(AMLCDDConstants.CUST_TYPE, custType);
		model.addAttribute(AMLCDDConstants.CLIENT_TYPE, custType);
		model.addAttribute(AMLCDDConstants.UPLOAD_CDD_TYPE, cddType);
		model.addAttribute(AMLCDDConstants.RISK_RATING, riskRating);
		model.addAttribute(AMLCDDConstants.FORM_VERSION, formVersion);
		List<String> pickListTypesWithSelect= new ArrayList<String>();
		pickListTypesWithSelect.add(AMLCDDConstants.ISO_COUNTRY_LKUP);
		Map<String, List<PickListLkUpVO>> eddPickListWithSelectMap = super.getPickListWithSelect(pickListTypesWithSelect);
		model.addAttribute(AMLCDDConstants.EDD_SELECT_PICKLIST_MAP, eddPickListWithSelectMap);
		Map<String, UiLabelVO> eddUiLabels = super.getUiLabels(AMLCDDConstants.COMMON);
		model.addAttribute(AMLCDDConstants.EDD_UI_LABELS,eddUiLabels);
		if(AMLCDDConstants.DONOR.equalsIgnoreCase(mapType)){
			model.addAttribute(AMLCDDConstants.EDD_MAP_TYPE,AMLCDDConstants.DONOR);
		}
		return "donorDetailsPopUp";
    }

}
