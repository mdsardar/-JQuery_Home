function removebrowhistory() {
	try {
		var fname;
		if (document.getElementsByTagName("form") != null
				&& document.getElementsByTagName("form")[0] != null
				&& document.getElementsByTagName("form")[0].id != null
				|| document.getElementsByTagName("form")[0].id != "undefined"
				|| document.getElementsByTagName("form")[0].id.trim() != ""
				|| document.getElementsByTagName("form")[0].action != "") {
			fname = document.getElementsByTagName("form")[0].id;
			if (fname.trim() != "") {
				document.getElementById(fname).setAttribute("autocomplete",
						"off");
			}
		}
	} catch (e) {
	}
}
/**
 * This method is used to display the text in the type textare.
 * @returns
 */
function getTextAreaString(enteredText){
	if(enteredText){
		return enteredText.replace(/([^>\r\n]?)(\r\n|\n\r|\r|\n)/g, '<br />');
	} else{
		return enteredText;
	}
}

function RemoveOnlyDot(currObject)
{
	if(currObject.value == '.')
	{
		alert("Please enter the valid character");
		currObject.value='';
		return false;
	}
}

function disableFormElements(formId, fontNormal) {
	if(document.getElementById(formId)!=null){
		var elements = document.getElementById(formId).elements;
		if (elements != null) {
			for (var i = 0; i < elements.length; i++) {
				var type = elements[i].type;
				if (elements[i].id == null || elements[i].id == undefined
						|| elements[i].id == "") {
					continue;
				} else if (elements[i] != null && elements[i].style != null) {
					if (fontNormal != null && fontNormal != undefined
							&& fontNormal != "" && type != "button") {
						elements[i].style.fontWeight = fontNormal;
						elements[i].style.border= ""; // Added by Rakesh for removing highlighting when page is in read only mode.
					} else {
						elements[i].style.fontWeight = "bold";
					}
				}

				if (type == "text" || type == "textarea" || type == "select-one"
						|| type == "checkbox" || type == "select-multiple"
						|| type == "radio" || type == "button" || type == "number") {
					elements[i].disabled = true;
				}
			}
		}
		var capsImgTagNames = document.getElementById(formId).getElementsByTagName(
				'IMG');
		var smallImgTagNames = document.getElementById(formId)
				.getElementsByTagName('img');
		var capaLinks = document.getElementById(formId).getElementsByTagName('A');
		//alert(capaLinks);
		if (capaLinks != null) {
			for (var i = 0; i < capaLinks.length; i++) {
				//	alert(capaLinks[i].id);
				if ((capaLinks[i].className.indexOf('bbutton') != -1) 
						|| capaLinks[i].className.indexOf('whitebutton') != -1) {
					if (capaLinks[i].className.indexOf('Disabled') == -1) {
						capaLinks[i].className = capaLinks[i].className
								+ "Disabled";
					}
				}
			}
		}
		enableOrDisable(capsImgTagNames, true);
		enableOrDisable(smallImgTagNames, true);
		enableOrDisable(capaLinks, true);

	}
}

//Added by Viswa for allowing highlighting even the fields are readonly
function disableReadonlyFormElements(formId, fontNormal) {
	if(document.getElementById(formId)!=null){
		var elements = document.getElementById(formId).elements;
		if (elements != null) {
			for (var i = 0; i < elements.length; i++) {
				var type = elements[i].type;
				if (elements[i].id == null || elements[i].id == undefined
						|| elements[i].id == "") {
					continue;
				} else if (elements[i] != null && elements[i].style != null) {
					if (fontNormal != null && fontNormal != undefined
							&& fontNormal != "" && type != "button") {
						elements[i].style.fontWeight = fontNormal;
					} else {
						elements[i].style.fontWeight = "bold";
					}
				}

				if (type == "text" || type == "textarea" || type == "select-one"
						|| type == "checkbox" || type == "select-multiple"
						|| type == "radio" || type == "button" || type == "number") {
					elements[i].disabled = true;
				}
			}
		}
		var capsImgTagNames = document.getElementById(formId).getElementsByTagName(
				'IMG');
		var smallImgTagNames = document.getElementById(formId)
				.getElementsByTagName('img');
		var capaLinks = document.getElementById(formId).getElementsByTagName('A');
		//alert(capaLinks);
		if (capaLinks != null) {
			for (var i = 0; i < capaLinks.length; i++) {
				//	alert(capaLinks[i].id);
				if ((capaLinks[i].className.indexOf('bbutton') != -1) 
						|| capaLinks[i].className.indexOf('whitebutton') != -1) {
					if (capaLinks[i].className.indexOf('Disabled') == -1) {
						capaLinks[i].className = capaLinks[i].className
								+ "Disabled";
					}
				}
			}
		}
		enableOrDisable(capsImgTagNames, true);
		enableOrDisable(smallImgTagNames, true);
		enableOrDisable(capaLinks, true);

	}
}

function enableOrDisable(tagNames, bolDisabled) {
	if (tagNames != null) {
		for (var i = 0; i < tagNames.length; i++) {
			var tagId = tagNames[i].id;
			if (tagId != null && tagId.length > 0) {
				document.getElementById(tagId).disabled = bolDisabled;
				if (bolDisabled) {
					$('[class$="_JQuery"]').css('pointer-events', 'none');
				} else {
					$('[class$="_JQuery"]').css('pointer-events', 'auto');
				}
				enableOrDisablechlidSpanbuttons(document.getElementById(tagId),
						bolDisabled);
			}
		}
	}
}


function enableOrDisablechlidSpanbuttons(Obj, bolDisabled) {
	var spanids = $(Obj).find("span");
	$.each(spanids, function(key, group) {
		$(group).attr("disabled", bolDisabled);
	});
}


function editFormElements(formId) {
	if (document.getElementById(formId) != null) {
		var elements = document.getElementById(formId).elements;
		if (elements != null) {
			for (var count = 0; count < elements.length; count++) {
				var type = elements[count].type;
				if (elements[count].id == null
						|| elements[count].id == undefined
						|| elements[count].id == "") {
					continue;
				} else if (elements[count] != null
						&& elements[count].style != null)
					elements[count].style.fontWeight = "normal";

				if (type == "text" || type == "textarea") {
					document.getElementById(elements[count].id).disabled = false;
				} else if (type == "select-one") {
					document.getElementById(elements[count].id).disabled = false;
				} else if (type == "checkbox") {
					document.getElementById(elements[count].id).disabled = false;
				} else if (type == "select-multiple") {
					document.getElementById(elements[count].id).disabled = false;
				} else if (type == "radio") {
					if (elements[count].id != null) {
						document.getElementById(elements[count].id).disabled = false;
					}
				} else if (type == "button") {
					document.getElementById(elements[count].id).disabled = false;
				}
				try {
					var tempClasssName = document
							.getElementById(elements[count].id).className
							.replace('disabledlightgray', '');
					document.getElementById(elements[count].id).className = tempClasssName;
				} catch (e) {
				}
			}
		}
		var capsImgTagNames = document.getElementById(formId)
				.getElementsByTagName('IMG');
		var smallImgTagNames = document.getElementById(formId)
				.getElementsByTagName('IMG');
		var capaLinks = document.getElementById(formId).getElementsByTagName(
				'A');
		if (capaLinks != null) {
			for (var i = 0; i < capaLinks.length; i++) {
				if (capaLinks[i].className.indexOf('bbutton') != -1) {
					var tempClsName = capaLinks[i].className.replace(
							'Disabled', '');
					capaLinks[i].className = tempClsName;
				}
			}
		}
		enableOrDisable(capsImgTagNames, false);
		enableOrDisable(smallImgTagNames, false);
		enableOrDisable(capaLinks, false);
	}

}

function ajaxSendURL(furl, onsuccess, parameters) {
	var dataParams = '';
	if (parameters != null && parameters != undefined)
		dataParams = parameters;
	$.ajax({
		type : "POST",
		url : furl,
		data : dataParams,
		cache : false,
		async : true,
		success : onsuccess
	});
}

function ajaxSyncURL(furl, onsuccess) {
	$.ajax({
		type : "POST",
		url : furl,
		cache : false,
		async : false,
		success : onsuccess
	});
}

function ajaxSendForm(furl, formId, onsuccess) {
	$.ajax({
		type : "POST",
		url : furl,
		data : $('#' + formId).serialize(),
		cache : false,
		success : onsuccess,
		error : showErrors
	});
}

function resetFormElements(formName) {

	var form = document.getElementById ? document.getElementById(formName)
			: document.forms[formName];

	var elems = form.elements;
	for (var index = 0; index < elems.length; index++) {
		var type = elems[index].type;
		if (type == "text" || type == "hidden") {
			elems[index].value = '';
			elems[index].readOnly = false;
		} else if (type == "checkbox") {
			elems[index].checked = false;
		} else if (type == "select-one") {
			elems[index].value = elems[index].options[0].value;
		}
	}
}

var regerrormsg = /^err\w/;

function errorClear() {
	var allIds = returnAttributes('id');
	for (element in allIds) {
		if (regerrormsg.test(allIds[element])) {
			document.getElementById(allIds[element]).innerHTML = "";
		}

	}
}

function has_scrollbar(elem) {
	if (elem.clientHeight < elem.scrollHeight)
		return true;
	else
		return false;
}

function showPopUp(objPop) {
	if (objPop != null) {
		disablePopUpBG(objPop);
		objPop.style.display = "";
		setPopPageMiddle(objPop);
	}
}
var isParentGrayout=false;
function disablePopUpBG(objPop) {
	var cvrwidth = 0;
	var cvr = document.getElementById("greyout");
	var width = document.body.clientWidth;
	var height = document.body.scrollHeight;
	var parentLvl=0;
	
	if(cvr ==null || (parentLvl==1) || isParentGrayout){

		cvr = window.parent.document.getElementById("greyout");
		width = window.parent.document.body.clientWidth;
		height = window.parent.document.body.scrollHeight;
		isParentGrayout=false;
	}
	if(cvr ==null || (parentLvl==2)){
		cvr = window.parent.parent.document.getElementById("greyout");
		width = window.parent.parent.document.body.clientWidth;
		height = window.parent.parent.document.body.scrollHeight;
	}
	if(cvr!=null){
		cvr.style.display = "block";
	 	cvr.style.width = cvr.offsetWidth;
	 	cvrwidth = cvr.style.width.substring(0,(cvr.style.width.length)-2);	
	 	if(objPop != null && objPop != undefined && objPop != "undefined" && 
	 			(objPop.id == 'TT_TA_groupwise_table_id' || objPop.id == 'participantpopup' 
	 				|| objPop.id == 'TRTY_TA_riamount_table_id' || objPop.id == 'TRTY_TA_facshare_table_id' || objPop.id == 'agent_allocationTableId')) {
	 		cvr.style.left = 0;
		}else{
			var screenWidth=screen.width-4;
			if(width<screenWidth){
				width=screenWidth;
				cvr.style.width = screenWidth;
				cvr.style.left = 0;
			}else{
				cvr.style.left = (width - cvrwidth)/2;
			}
	   }
		if(document.getElementById("scroll_pane_Id")!=null)
		{
			var scrollPaneObj = document.getElementById("scroll_pane_Id");
			if($.browser.msie==true){
				if(height>=700){
				cvr.style.height = scrollPaneObj.scrollHeight;
				}
			}
		}else
		{
			cvr.style.height = height;
		}
	}
}
function setPopPageMiddle(objPop) {
	width = document.body.offsetWidth;
	height = document.body.offsetHeight;
	var greyObj = document.getElementById("greyout");
	if (greyObj == null) {
		greyObj = window.parent.document.getElementById("greyout");
		width = window.parent.document.body.offsetWidth;
		height = window.parent.document.body.offsetHeight;
	}
	if (greyObj == null) {
		greyObj = window.parent.parent.document.getElementById("greyout");
		width = window.parent.parent.document.body.offsetWidth;
		height = window.parent.parent.document.body.offsetHeight;
	}

	popWidth = objPop.offsetWidth;
	popHeight = objPop.offsetHeight;
	objPop.style.backgroundColor=document.bgColor;
	var screenWidth = screen.width - 4;
	if (width < screenWidth) {
		width = screenWidth;
	}
	objPop.style.right = (width / 2) - (popWidth / 2);
	objPop.style.left = (width / 2) - (popWidth / 2);
	if (height > popHeight) {
		objPop.style.top = (height / 2) - (popHeight / 2);
	} else {
		if (document.getElementById("pageLoaderId") != null) {
			objPop.style.top = (window.screen.height / 2);
		} else {
			objPop.style.top = (popHeight / 2);
		}
	}
	$("body").scrollTop(0);
}

/* Common Function to remove the comma from the ###,###,### number. This will be called before Save POST */
function removeFormatInNumbers(_self) {
	var value = _self.value;
	value = this.removeFormat(value);
	_self.value = value;
	_self.select();
}

function removeFormat(value) {
	if (value != null && value != "") {
		if (value.indexOf('-') != -1) {
			value = value.replace(/-/g, '');
		}
	}
	return value;
}

/* Common Function to correct the Fractional Part. */
function roundOfFractionalPart(value) {
	if (value != null && value != "") {
		var totalDigits = parseInt(2);
		if (!isNaN(value)) {
			if (value.indexOf('.') != -1) {
				var fractionalPart = value.substring(value.indexOf('.') + 1,
						value.length);
				var fract = 1;
				var cnt;
				for (cnt = 0; cnt < totalDigits; cnt++) {
					fract *= 10;
				}
				var value1 = parseFloat(value) * fract;
				value1 = Math.round(parseFloat(value1));
				value1 = value1 / fract;
				value1 = "" + value1;
				if (value1.indexOf('.') > 0) {
					fract = value1.length - value1.indexOf('.');
					for (var index = fract - 1; index < totalDigits; index++) {
						value1 += "0";
					}
				} else {
					value1 = addZero(value1, totalDigits);
				}
				value = value1;

			} else {
				value = parseFloat(value);
				value = addZero(value, totalDigits);
			}
		} else {
			value = addZero("0", totalDigits);
		}
	}
	return value;
}

function addZero(value, max) {
	value = value + '.';
	for (var index = 0; index < max; index++) {
		value += "0";
	}
	return value;
}

//to show popup loader
function showPopupLoader() {
	if(document.getElementById('overlay')!=null){
		document.getElementById('overlay').style.display='block';
	}
	var tableObj = document.getElementById("pageLoaderId");
	var parentLvl = 0;
	if (tableObj == null) {
		tableObj = window.parent.document.getElementById("pageLoaderId");
		parentLvl = 1;
	}
	if (tableObj == null) {
		tableObj = window.parent.parent.document.getElementById("pageLoaderId");
		parentLvl = 2;
	}
	//Open AJAX Response Waiting Loader
	if (tableObj != null)
		showPopUp(tableObj, true, parentLvl);
}
//to close the popup loader which is already running
function closePopupLoader() {
	if(document.getElementById('overlay')!=null){
		document.getElementById('overlay').style.display='none';
	}
	var tableObj = document.getElementById("pageLoaderId");
	if (tableObj != null)
		tableObj.style.display = "none";
	if (window.parent.document.getElementById("pageLoaderId") != null) {
		tableObj = window.parent.document.getElementById("pageLoaderId");
		tableObj.style.display = "none";
	}
	if (window.parent.parent.document.getElementById("pageLoaderId") != null) {
		tableObj = window.parent.parent.document.getElementById("pageLoaderId");
		tableObj.style.display = "none";
	}
	if (window.parent.parent.parent.document.getElementById("pageLoaderId") != null) {
		tableObj = window.parent.parent.parent.document
				.getElementById("pageLoaderId");
		tableObj.style.display = "none";
	}
	if (tableObj != null) {
		closePopUp();
	}
}
function hidePopUp(popupId){
	if(document.getElementById(popupId) != null){
		document.getElementById(popupId).style.display="none";
	}
	if(window.parent.document.getElementById(popupId) != null){
		window.parent.document.getElementById(popupId).style.display="none";
	}
	if(window.parent.parent.document.getElementById(popupId) != null){
		window.parent.parent.document.getElementById(popupId).style.display="none";
	}
	if(window.parent.parent.parent.document.getElementById(popupId) != null){
		window.parent.parent.parent.document.getElementById(popupId).style.display="none";
	}
	closePopUp();
}
function closePopUp() {
	if(document.getElementById("greyout") != null)
		document.getElementById("greyout").style.display = "none";
	if(window.parent.document.getElementById("greyout") != null)
		window.parent.document.getElementById("greyout").style.display = "none";
	if(window.parent.parent.document.getElementById("greyout") != null)
		window.parent.parent.document.getElementById("greyout").style.display = "none";
	if(window.parent.parent.parent.document.getElementById("greyout") != null)
		window.parent.parent.parent.document.getElementById("greyout").style.display = "none";
}
function closePopupLoaderOnly() {
	var tableObj = document.getElementById("pageLoaderId");
	if (tableObj != null)
		tableObj.style.display = "none";
	if (window.parent.document.getElementById("pageLoaderId") != null) {
		tableObj = window.parent.document.getElementById("pageLoaderId");
		tableObj.style.display = "none";
	}
	if (window.parent.parent.document.getElementById("pageLoaderId") != null) {
		tableObj = window.parent.parent.document.getElementById("pageLoaderId");
		tableObj.style.display = "none";
	}
	if (window.parent.parent.parent.document.getElementById("pageLoaderId") != null) {
		tableObj = window.parent.parent.parent.document
				.getElementById("pageLoaderId");
		tableObj.style.display = "none";
	}
}

/* Common Function to change the number field in the format ###,###,### */
function addFormatInNumbers(_self, isDecimal) {
	if (_self != null) {

		var value = _self.value;
		if (value.indexOf(',') != -1) {
			//this.removeFormatInNumbers(_self);
			value = value.replace(/,/g, '');
			_self.value = value;
		}
		value = _self.value;
		if (value.length > 1)
			value = value.replace(/^[0]+/g, '');
		if ((isDecimal != null && isDecimal) || (isDecimal == undefined))
			value = this.roundOfFractionalPart(value);
		value = this.addFormat(value);
		_self.value = value;
	}
}

function addFormat(value) {
	var fractionalPart = "";
	if (value.indexOf(".") != -1) {
		fractionalPart = value.substring(value.indexOf("."), value.length);
		value = value.substring(0, value.indexOf("."));
	}
	var strreg = '(-?[0-9]+)([0-9]{0})';
	var digits = '#,##0.00';
	var noofdigits = digits.indexOf('.') - digits.lastIndexOf(',');
	strreg = strreg.replace("{0}", "{" + (noofdigits - 1) + "}");
	var objRegExp = new RegExp(strreg);
	while (objRegExp.test(value)) {
		value = value.replace(objRegExp, '$1,$2');
	}
	value = value + fractionalPart;
	return value;
}

function addFormatDynamic(_self, isDecimal, pattern, noOfDecimal) {

	if (_self != null) {
		var value = _self.value;
		if (value.indexOf(',') != -1) {
			//this.removeFormatInNumbers(_self);
			value = value.replace(/,/g, '');
			_self.value = value;
		}
		value = _self.value;
		if (value.length > 1)
			value = value.replace(/^[0]+/g, '');
		if ((isDecimal != null && isDecimal) || (isDecimal == undefined))
			value = this.roundOfFractionalPartDecimal(value, noOfDecimal);
		value = this.addFormatDymanic(value, pattern, noOfDecimal);
		_self.value = value;
	}
}
function roundOfFractionalPartDecimal(value, noOfDecimals) {
	if (value != null && value != "") {
		var totalDigits = parseInt(noOfDecimals);
		if (!isNaN(value)) {
			if (value.indexOf('.') != -1) {
				var fractionalPart = value.substring(value.indexOf('.') + 1,
						value.length);
				var fract = 1;
				var cnt;
				for (cnt = 0; cnt < totalDigits; cnt++) {
					fract *= 10;
				}
				var value1 = parseFloat(value) * fract;
				value1 = Math.round(parseFloat(value1));
				value1 = value1 / fract;
				value1 = "" + value1;
				if (value1.indexOf('.') > 0) {
					fract = value1.length - value1.indexOf('.');
					for (var index = fract - 1; index < totalDigits; index++) {
						value1 += "0";
					}
				} else {
					value1 = addZero(value1, totalDigits);
				}
				value = value1;

			} else {
				value = parseFloat(value);
				value = addZero(value, totalDigits);
			}
		} else {
			value = addZero("0", totalDigits);
		}
	}
	return value;
}
function addFormatDymanic(value, pattern, noOfDecimal) {
	var fractionalPart = "";
	if (value.indexOf(".") != -1) {
		fractionalPart = value.substring(value.indexOf("."), value.length);
		value = value.substring(0, value.indexOf("."));
	}
	var strreg = '(-?[0-9]+)([0-9]{0})';
	if (!noOfDecimal || 'null' == noOfDecimal) {
		noOfDecimal = '2';
	}
	noOfDecimal = "." + noOfDecimal;
	if (value == "0" || value == "0.0") {
		noOfDecimal = "0" + noOfDecimal;
	}
	if (!pattern || 'null' == pattern) {
		pattern = '###,###,###,###';
	}
	var digits = pattern + noOfDecimal;
	var noofdigits = digits.indexOf('.') - digits.lastIndexOf(',');
	strreg = strreg.replace("{0}", "{" + (noofdigits - 1) + "}");
	var objRegExp = new RegExp(strreg);
	while (objRegExp.test(value)) {
		value = value.replace(objRegExp, '$1,$2');
	}
	value = value + fractionalPart;
	return value;
}


function toInitCap(obj) {
	  var str=obj.value;
	  obj.value="";
	  return str.replace(/([^\W_]+[^\s-]*) */g, function(txt) {
	    if(!checkNull(obj.value)){
	      obj.value = obj.value+txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
	    }else{
	      obj.value = txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
	    }
	  });
	}


function getAjaxObject() {
	var ajaxObject = null;
	try {
		if (window.XMLHttpRequest) {
			ajaxObject = new XMLHttpRequest();
		} else {
			try {
				if (window.ActiveXObject) {
					ajaxObject = new ActiveXObject("Microsoft.XMLHTTP");
				}
			} catch (e) {
				if (ajaxObject == null) {
					alert("Browser does not support HTTP Request");
				}
			}
		}
	} catch (e) {
		try {
			if (window.ActiveXObject) {
				ajaxObject = new ActiveXObject("Microsoft.XMLHTTP");
			}
		} catch (e) {
			if (ajaxObject == null) {
				alert("Browser does not support HTTP Request");
			}
		}
	}

	if ($.isFunction(resetSessionPopup)) {
		resetSessionPopup();
	}
	return ajaxObject;
}
//Allow only 0-9 numbers(For Integer validation) 
function allowOnlyIntegers(evt) {

	var theEvent = evt || window.event;
	var keycode = theEvent.keyCode || theEvent.which;
	var key = String.fromCharCode(keycode);
	var regex = /[0-9]/;

	if (keycode != 9 && keycode != 32 && keycode != 46 && keycode != 8) {
		if (!regex.test(key)) {
			theEvent.returnValue = false;
		}
	}

	return theEvent.returnValue;
}

function allowOnlyNumbers(evt) {

	var theEvent = evt || window.event;
	var keycode = theEvent.keyCode || theEvent.which;
	var key = String.fromCharCode(keycode);
	var regex = /[0-9]/;

	if (!regex.test(key)) {
		theEvent.returnValue = false;
	}

	return theEvent.returnValue;
}

// Allow only 0-9 numbers(For numeric validation) 
function onlyNumbersWithDot(evt,objVal) {
	
	var keynum;
	var keychar;
	var numcheck;

	if (window.event) // IE
	{
		keynum = evt.keyCode;
	}

	else if (evt.which || evt.keyCode) // Netscape/Firefox/Opera
	{

		keynum = evt.which;
	}
	
	keychar = String.fromCharCode(keynum);
	numcheck = /\d|\./;
	var isNumber = numcheck.test(keychar);
	// Its support event for  BackWard ,forWard  Delete and  TAB
	if (keynum == 8 || keynum == 0){
		isNumber = true;
	}
		
	if(objVal.split('.').length > 1) {
		if(objVal.split('.')[1].length < 2){
			numcheck = /[0-9]/;
			isNumber = numcheck.test(keychar);
		}
	}
	
	return isNumber;
}

// Allow only 0-9 numbers(For numeric validation) and space
function onlyNumbersAndSpace(evt) {

	var keynum;
	var keychar;
	var numcheck;

	if (window.event) // IE
	{
		keynum = evt.keyCode;
	}

	else if (evt.which || evt.keyCode) // Netscape/Firefox/Opera
	{

		keynum = evt.which;
	}

	keychar = String.fromCharCode(keynum);
	numcheck = /\d|\ /;
	var isNumber = numcheck.test(keychar);
	// Its support event for  BackWard ,forWard  Delete and  TAB
	if (keynum == 8 || keynum == 0)
		isNumber = true;

	return isNumber;
}
function onlyNumbersAndSlash(evt) {

	var keynum;
	var keychar;
	var numcheck;

	if (window.event) // IE
	{
		keynum = evt.keyCode;
	} else if (evt.which || evt.keyCode) // Netscape/Firefox/Opera
	{
		keynum = evt.which;
	}
	keychar = String.fromCharCode(keynum);
	numcheck = /\d|\//;
	var isNumber = numcheck.test(keychar);
	return isNumber;

}
function onlyAmount(evt, obj) {
	var keynum;
	var keychar;
	var numcheck;
	var value = obj.value;

	// This code not working in firefox.
	// Below code added for get selected value in text box
	var selectedValue = '';
	if (window.getSelection) {
		selectedValue = window.getSelection();
	} else if (document.getSelection) {
		selectedValue = document.getSelection();
	} else if (document.selection) {
		selectedValue = document.selection.createRange().text;
	}
	if (selectedValue != null && selectedValue != ''
			&& selectedValue.toString().indexOf('.') != -1) {
		value = value.replace(selectedValue, '');
	}

	//var valArray=value.split("");
	if (window.event) // IE
	{
		keynum = evt.keyCode;
	} else if (evt.which || evt.keyCode) // Netscape/Firefox/Opera
	{

		keynum = evt.which;
	}
	keychar = String.fromCharCode(keynum);
	numcheck = /^[0-9]*\.?[0-9]*$/;
	value = value + keychar;
	var isNumber = numcheck.test(value);
	// Its support event for  BackWard ,forWard  Delete and  TAB
	if (keynum == 8 || keynum == 0)
		isNumber = true;
	return isNumber;
}

function allowNegativeNumbers(evt) {
	var theEvent = evt || window.event;
	var keycode = theEvent.keyCode || theEvent.which;
	var key = String.fromCharCode(keycode);
	var regex = /^-?[0-9]*$/;

	if (!regex.test(key)) {
		theEvent.returnValue = false;
	}

	return theEvent.returnValue;
}
function onlyAlphabets(evt) {
	try {
		var charCode;
		if (window.event) {
			charCode = window.event.keyCode;
		} else if (evt.which) {
			charCode = evt.which;
		} else {
			return true;
		}
		if ((charCode > 64 && charCode < 91)
				|| (charCode > 96 && charCode < 123) || charCode == 8
				|| charCode == 32) {
			return true;
		} else
			return false;
	} catch (e) {
	}
}

function onlyAlphaNumeric(evt) {
	var keynum;
	var keychar;
	var numcheck;

	if (window.event) // IE
	{
		keynum = evt.keyCode;
	}

	else if (evt.which || evt.keyCode) // Netscape/Firefox/Opera
	{

		keynum = evt.which;
	}

	keychar = String.fromCharCode(keynum);
	numcheck = /[0-9]/;

	var isNumber = numcheck.test(keychar);
	// Its support event for  BackWard ,forWard  Delete and  TAB
	if (keynum == 8 || keynum == 0 || (keynum > 64 && keynum < 91)
			|| (keynum > 96 && keynum < 123) || keynum == 32)
		isNumber = true;

	return isNumber;
}

function alphaNumericWithDot(evt) {
	var keynum;
	var keychar;
	var numcheck;

	if (window.event) // IE
	{
		keynum = evt.keyCode;
	}

	else if (evt.which || evt.keyCode) // Netscape/Firefox/Opera
	{

		keynum = evt.which;
	}

	keychar = String.fromCharCode(keynum);
	numcheck = /[a-zA-Z0-9\.]/;

	var isNumber = numcheck.test(keychar);
	// Its support event for  BackWard ,forWard  Delete and  TAB
	if (keynum == 8 || keynum == 0 || (keynum > 64 && keynum < 91)
			|| (keynum > 96 && keynum < 123) || keynum == 32)
		isNumber = true;

	return isNumber;
}

//Restric Special characters
function restrictSpecialCharacters(event) {
	var theEvent = evt || window.event;
	var keycode = theEvent.keyCode || theEvent.which;
	var key = String.fromCharCode(keycode);
	var regex = /[a-z][A-Z][0-9]/ ;

	if (!regex.test(key)) {
		theEvent.returnValue = false;
	}

	return theEvent.returnValue;
}
function blockSpecialCharacters(event){
	event = (event) ? event : window.event;
	var charCode = (event.which) ? event.which : event.keyCode;
	return ((charCode > 64 && charCode < 91) || (charCode > 96 && charCode < 123) || charCode == 8 || (charCode >= 48 && charCode <= 57));
}

function checkNull(data){
	data = trimAll(data);
	if(data.length > 0){
		return false;
	}else{
		return true;
	}
}

function trimAll(data){
	if(data == null){
		return;
	}
	return data.toString().replace(/ /g,"");
}

var lastIndex=0;
var dynamicTableName='dynamicTable';
function addRow(tableId){
	var table = document.getElementById(tableId);
	var rowCount = table.rows.length;
	var row = table.insertRow(rowCount);
	
	var cell1 = row.insertCell(0);
	cell1.innerHTML = "<input type='checkbox' id='selectFlag_'"+lastIndex+"/>";
	cell1.width = "10%";
	
	var cell2 = row.insertCell(1);
	cell2.innerHTML = "<input type='text' id='selectFlag_'"+lastIndex+"/>";
	cell2.width = "20%";
	
	var cell3 = row.insertCell(2);
	cell3.innerHTML = "<input type='text' id='selectFlag_'"+lastIndex+"/>";
	cell3.width = "20%";
	
	var cell4 = row.insertCell(3);
	cell4.innerHTML = "<a>www.goo.com<a/>"
	cell4.width = "20%";
	
	var cell5 = row.insertCell(4);
	cell5.innerHTML = "<textArea id='remarks_'"+lastIndex+"></textArea>";
	cell5.width = "20%";	
	
	var cell6 = row.insertCell(5);
	cell6.innerHTML = "<input type='button' value='Delete' onclick='deleteRow(this)'/>";
	cell6.width = "20%";
	
	lastIndex++;
}

function deleteRow(obj){
	var index = obj.parentNode.parentNode.rowIndex;
	var table = document.getElementById(dynamicTableName);
	table.deleteRow(index);
}

function deleteMultipleRows(){

    var table = document.getElementById(dynamicTableName);

    var rowCount = table.rows.length;

    for(i=1;i<rowCount;i++){

            var myTDs = table.rows.item(i).childNodes;

            var myTD = myTDs.item(0);

            var obj = myTD.childNodes.item(0);

            if(obj.type=='checkbox'){

                    if(obj.checked==true){

                            deleteRow(obj);

                            setTimeout('deleteMultipleRows()',100);

                    }       

            }

    }

}
function validateField(obj) {

    if(checkNull(obj.value)){

            obj.style.borderColor="#FF6133";

        obj.style.borderWidth="1px";

    }else{

            obj.style.removeProperty('border');

    }

}
function ajaxSendController(furl, onsuccess, parameters) {
	var dataParams = '';
	if (parameters != null && parameters != undefined)
		dataParams = parameters;
	$.ajax({
		type : "POST",
		dataType: "json",
		contentType: 'application/json',
        mimeType: 'application/json',
		url : furl,
		data : dataParams,
		success : onsuccess,
		error : commonError,
	});
}
function commonError(){
	
}
function commonSuccess(){
	
}
function disableAllSourceFileds(){
	$('[class^="source"]').prop("disabled",true);
}

function compareRisk(newRisk, oldRisk) {
	var riskScore = false;
	var riskLevels = {'L':1, 'M':2, 'HL':3,'HM':4,'HH':5};
	if(riskLevels[newRisk] > riskLevels[oldRisk]) {
		riskScore = true	
	}
	return riskScore;
}

function hexc(colorval) {
    var parts = colorval.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
    delete(parts[0]);
    for (var i = 1; i <= 3; ++i) {
        parts[i] = parseInt(parts[i]).toString(16);
        if (parts[i].length == 1) parts[i] = '0' + parts[i];
    }
    color = '#' + parts.join('');

    return color;
}

function loadPagination(pageNo, totalCount, jsFunction) {
	showPopupLoader();
	$.ajax({
		contentType : "application/json; charset=utf-8",
		url : "/amlcdd/loadPagination?pageNo="+pageNo+"&totalCount="+totalCount+"&jsFunction="+jsFunction,
		success : function(data) {
			$('#pagination').html(data);
		},
		error: function(error) {
			console.log(error);
		}
	});
}
function removeBorderColor(currObject) {
	alert("fffff");
	if(currObject.value.trim()!='') {
		currObject.style.borderColor="#cccccc";
	} else {
		currObject.style.borderColor="#ff0000";
	}
}
function removeBorderToRadioButtonWhenClick(ctrlNameId) {
	try{
		if(ctrlNameId) {
			$(ctrlNameId).css('border', 'none');
		}
	}catch (e) {
	}
}

//Common Dialog for multi Selection
var commonDialog = null;
function intMultiSelectModal(){
	commonDialog = {
			autoOpen: false,
		    resizable: false,
		    height: 350,
		    width: 600,
		    modal: true,
		    cache: false,
		    close: function() {
		        $(this).dialog("destroy");
		    }
		};
};

function moveto(fromId, toId){
	$("#"+fromId+" option:selected").each(function(){
		$val=$(this).val(); 
		 if(!serachval($val, toId)){
			 var tmp = '<option  value='+$(this).val()+' title="'+$(this).text()+'" >'+$(this).text()+'</option>' ;
			 $('#'+toId).append(tmp); 
		 }
	})  
}

function movetoForEddCountry(fromId, toId,alrtMsg){
	$("#"+fromId+" option:selected").each(function(){
		$val=$(this).val(); 
		 if(!serachval($val, toId)){
			 var length = $("#"+toId+" option").length;
				if(length == 5){
					alert(alrtMsg);
					return false;
				}else{
					
					if(length<5){
						var tmp = '<option  value='+$(this).val()+' title="'+$(this).text()+'" >'+$(this).text()+'</option>' ;
						 $('#'+toId).append(tmp);
					}
				}
			 
		 }
	})  
}

function movefrom(toId, fromId){
	 $("#"+toId+" option:selected").each(function(){
		 $val=$(this).val(); 
		 if(!serachval($val, fromId)){
		    	var tmp = '<option  value='+$(this).val()+' title="'+$(this).text()+'" >'+$(this).text()+'</option>' ;
		    	$('#'+fromId).append(tmp); 
		  }
		 $(this).remove(); 
	 })    
}


function serachval(val, fromId){
		$boool=0;
        $("#"+fromId+" option").each(function(){   
        if ($(this).val()==val) {      
        $boool=1; 
        }    
        })
        if ($boool==1) {return true;}
        else{return false;}       
}

function moveall(idd1, idd2, isRemoval){
    $("#"+idd1+" option").each(function(){
	 $val=$(this).val();
	 if(!serachval($val,idd2)){
		 var tmp = '<option  value='+$(this).val()+' title="'+$(this).text()+'" >'+$(this).text()+'</option>' ;
	     $('#'+idd2).append(tmp); 
	 }
     if(isRemoval == 'true'){
    	$(this).remove();
     }
 }) 
}


function showMultiselectionDialog(modelId){
	if($("#"+modelId)){
		var theDialog = $("#"+modelId).dialog(commonDialog);
		theDialog.dialog("open");
	}
	
}
function closeMultiselectionDialog(modelId){
	if($("#"+modelId)){
		var theDialog = $("#"+modelId).dialog(commonDialog);
		theDialog.dialog("close");
	}
	
}

function showDocUploadDialog(modelId){
	if($("#"+modelId)){
		var theDialog = $("#"+modelId).dialog(commonDialog);
		theDialog.dialog("open");
	}
	
}
function closeDocUploadDialog(modelId){
	if($("#"+modelId)){
		document.getElementById("successMsgFileUploadDiv").style.display = "none";
	    document.getElementById("failureMsgFileUploadDiv").style.display = "none";	
		var theDialog = $("#"+modelId).dialog(commonDialog);
		theDialog.dialog("close");
	}
}

function saveEddMultiselection(fromId, toId, modelId,alrtMsg){
	$("#"+toId+" option").each(function(index1, ele1){
		$(ele1).remove();
	})
	 $("#"+fromId+" option").each(function(index, ele){
		var flag = true;
		$(ele).prop('selected', false);
		$("#"+toId+" option").each(function(index1, ele1){
			if($(ele1).val() == $(ele).val()){
				flag = false;
				return;
			}
		})
		if(flag){
			var tmp = '<option  value='+$(ele).val()+' title="'+$(this).text()+'" >'+$(ele).text()+'</option>' ;
			$('#'+toId).append(tmp);
		}
		
	 }) 
	
	var length = $("#"+toId+" option").length;
	if(length == 0){
		$('#'+toId).addClass('mandatoryFld');
	}else{
		$('#'+toId).removeClass('mandatoryFld');
		$('#'+toId).css("border", "");
	}
	if(modelId=='multiSelectBusiCountryDialog'){
		if(length>5){
			alert(alrtMsg);
			intMultiSelectModal();
		}
		else{
			if(modelId != null){
				 closeMultiselectionDialog(modelId);
			 }
		}
	}
	else{
		if(modelId != null){
			closeMultiselectionDialog(modelId);
		}
	}
	 
}

function saveMultiselection(fromId, toId, modelId,mandFlag){
	$("#"+toId+" option").each(function(index1, ele1){
		$(ele1).remove();
	})
	 $("#"+fromId+" option").each(function(index, ele){
		var flag = true;
		$(ele).prop('selected', false);
		$("#"+toId+" option").each(function(index1, ele1){
			if($(ele1).val() == $(ele).val()){
				flag = false;
				return;
			}
		})
		if(flag){
			var tmp = '<option  value='+$(ele).val()+' title="'+$(this).text()+'" >'+$(ele).text()+'</option>' ;
			$('#'+toId).append(tmp);
		}
		
	 }) 
	
	var length = $("#"+toId+" option").length;
	if(length == 0){
		if(mandFlag=='Y'){
			$('#'+toId).addClass('mandatoryFld');
		}else{
			$('#'+toId).removeClass('mandatoryFld');
			$('#'+toId).css("border", "");
		}
	}else{
		$('#'+toId).removeClass('mandatoryFld');
		$('#'+toId).css("border", "");
	}
	if(modelId=='multiSelectBusiCountryDialog'){
		if(length>5){
			alert('Maximum 5 Countries Only Allowed');
			intMultiSelectModal();
		}
		else{
			if(modelId != null){
				 closeMultiselectionDialog(modelId);
			 }
		}
	}
	else{
		if(modelId != null){
			closeMultiselectionDialog(modelId);
		}
	}
	 
}

function cancelMultiselection(modelId){ 
	if(modelId != null){
		closeMultiselectionDialog(modelId);
	 }
}
function onChangeFunc(){
	alert("dddd");
	var onChangeObj = $('#isChanged');
	onChangeObj.val('false');
	$('input,select,textarea').blur(function(){
		if(this.type!='checkbox'){
			if(this.type =='radio'){
				onChangeObj.val('true');
			} else {
				if(this.type != 'select-multiple' && this.type != 'button'){
					if($('#'+this.id).data('oldVal')!=this.value){
						onChangeObj.val('true');
					}
				}
			}
		} else {
			onChangeObj.val('true');
		}
	});
	$('input,select,textarea').change(function(){
		if(this.type!='checkbox'){
			if(this.type =='radio'){
				onChangeObj.val('true');
			} else {
				if(this.type != 'select-multiple' && this.type != 'button'){
					if($('#'+this.id).data('oldVal')!=this.value){
						onChangeObj.val('true');
					}
				}
			}
		} else {
			onChangeObj.val('true');
		}
	});
	$('a').click(function(){
		if(this.className.indexOf('bbutton') != -1){
			onChangeObj.val('true');
		}
	});
	
	$('input,select,textarea').focus(function(){
		if(this.type != 'select-multiple' && this.type != 'button'){
			$('#'+this.id).data('oldVal',$('#'+this.id).val());
		}
	});
}
function resetBorderColorToElements(divName) {
	var elems = $("#"+divName).find("input,select-one,select,textarea");
	for (var index = 0; index < elems.length; index++) {
		var type = elems[index].type;
		if (type == "text" || type == "select-one" || type == "textarea") {
			if(elems[index].value != '') {
				elems[index].style.borderColor="#cccccc";
			}
		}
	}
}
function isValidYear(currObject) {
	if(currObject != null && currObject.value.trim() !='') {
		$.ajax({
			type : "POST",
			url : "cddDateValidation/isValidYear?year="+currObject.value.trim()+"&currentYear="+getCurrentYear(),
			async : false,
			success : function(respTxt) {
				if(respTxt!=null && respTxt.trim()!='') {
					var response = respTxt.split("~");
					if(response[0] == 'N'){
						alert(response[1]);
						currObject.value='';
						currObject.onchange();	
					}
					
				}
			},
			error: function(error) {
				console.log(error);
			}
		});
	}
}
function isFutureDate(currObject) {
	setTimeout(function () {
	if(currObject != null && currObject.value.trim() !='') {
		$.ajax({
			type : "POST",
			url : "cddDateValidation/isFutureDate?date="+currObject.value.trim()+"&currentDate="+getCurrentDate(),
			async : false,
	        timeout: 600000,
			success : function(respTxt) {
				if(respTxt!=null && respTxt.trim()!='' && respTxt.trim() == 'Y') {
					alert('Date should be less than or e22quals to current date.');
					currObject.value='';
					currObject.onchange();
				}
			},
			error: function(error) {
				console.log(error);
			}
		});
	}
	},10);
}
function isValidDate(currObject) {
	setTimeout(function () {
	if(currObject != null && currObject.value.trim() !='') {
		$.ajax({
			type : "POST",
			url : "cddDateValidation/isValidDate?date="+currObject.value.trim(),
			async : false,
	        timeout: 600000,
			success : function(respTxt) {
				if(respTxt!=null && respTxt.trim()!='' && respTxt.trim() == 'N') {
					alert('Please enter a valid date');
					currObject.value='';
					currObject.onchange();
				}
			},
			error: function(error) {
				console.log(error);
			}
		});
	}
	},10);
}
/*START-CHANGE|RAJARAJAN|10JUL2018|651*/
function isValidDateFormat(currObject){
	if(currObject.value != ''){
	var chkdate=currObject.value;
	if(!chkdate.match(/^\d{2}\-\d{2}\-\d{4}$/)){
		alert('Please enter the date in the format MM-DD-YYYY');
		currObject.value='';
		return false;
		}
	}
}
/*END-CHANGE|RAJARAJAN|10JUL2018|651*/
function isValidFutureDate(currObject) {
	setTimeout(function () {
	if(currObject != null && currObject.value.trim() !='') {
		$.ajax({
			type : "POST",
			url : "cddDateValidation/isValidDate?date="+currObject.value.trim(),
			async : false,
	        timeout: 600000,
			success : function(respTxt) {
				if(respTxt!=null && respTxt.trim()!='' && respTxt.trim() == 'N') {
					alert('Please enter a valid date');
					currObject.value='';
					currObject.onchange();
				} else {
					isFutureDate(currObject);
				}
			},
			error: function(error) {
				console.log(error);
			}
		});
	}
	},10);
}
function onlyNumberslessthan100(currObject) {
	if(currObject != null && currObject.value.trim() !='') {
		$.ajax({
			type : "POST",
			url : "cddDateValidation/isValidNumber?number="+currObject.value.trim(),
			async : false,
			success : function(respTxt) {
				if(respTxt!=null && respTxt.trim()!='') {
					var response = respTxt.split("~");
					if(response[0] == 'N'){
						alert(response[1]);
						currObject.value='';
						currObject.onchange();	
					}
					
				}
			},
			error: function(error) {
				console.log(error);
			}
		});
	}
}

function isValidPercentage(currObject) {
	if(currObject != null && currObject.value.trim() !='') {
		if(currObject.value == '.')
			{
				alert("Please enter the valid character");
				currObject.value='';
				return false;
			}
		$.ajax({
			type : "POST",
			url : "cddDateValidation/isValidPercentage?number="+currObject.value.trim(),
			async : false,
			success : function(respTxt) {
				if(respTxt!=null && respTxt.trim()!='') {
					var response = respTxt.split("~");
					if(response[0] == 'N'){
						alert(response[1]);
						currObject.value='';
						currObject.onchange();	
					}
					
				}
			},
			error: function(error) {
				console.log(error);
			}
		});
	}
}
function checkForMaxlenth(evt,str,maxLength) {
	var theEvent = evt || window.event;
	var count = getCharCount(str);
    if(maxLength <= count) {
    	theEvent.returnValue = false;
    }
    return theEvent.returnValue;
}
function getCharCount(str){
	var count = 0;
    for (var i = 0, len = str.length; i < len; i++) {
    	if(str.charCodeAt(i) < 128) {
    		count += 1; 
    	} else if(str.charCodeAt(i) < 2048) {
    		count += 2; 
    	} else if(str.charCodeAt(i) < 65536) {
    		count += 3; 
    	} else {
    		count += 4; 
    	}
    }
    return count;
}
function checkForMaxlenthInBlur(currObj,maxLength) {
	if(currObj && currObj.value.trim() !=''){
	    var count = getCharCount(currObj.value);
	    var fldlength=maxLength+1;
	    if(maxLength < count) {
	    	//alert('Exceeded maximum length for this field');
	    	alert(maxlenFst+' ' +fldlength+' '+maxlenLst);
	    	currObj.value='';
	    	currObj.onchange();
	    }
	}
}
function allowOnlyNumbersInBlur(currObj,maxLength) {
	if(currObj && currObj.value.trim() !=''){
	    var count = getCharCount(currObj.value);
	    if(maxLength < count) {
	    	alert('Exceeded maximum length for this field');
	    	currObj.value='';
	    	currObj.onchange();
	    }
	}
}
	
function getStringLength(str){
	var count = 0;
    for (var i = 0, len = str.length; i < len; i++) {
        count += str.charCodeAt(i) < 256 ? 1 : 1;
    }
    return count;
}
function validateEmail(email){
	if(email && email.value.trim() != '') {
		 if(/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(email.value)){
		 } else {
			 alert('Please enter a valid email.');
		 }
	}
}
function getCurrentDate(){
	var today = new Date();
	var currentDate = (today.getMonth()+ 1) +"-"+ today.getDate() + "-" + today.getFullYear();
	return currentDate;
}
function getCurrentYear(){
	return new Date().getFullYear();
}
/**
 * This Method is used to hide or show the Next button on Datatable. 
 * @param pTotalRecord
 * @param pCount
 * @param assignedPageNo
 * @returns
 */
function handleLastPageInDatatable(pTotalRecord,pCount,assignedPageNo){
	var pageFlg =true;
	var totPageCount=0;
	if(pTotalRecord % pCount == 0){
		totPageCount = pTotalRecord/pCount;
		if(totPageCount == assignedPageNo){
			pageFlg = false;
		}
	}
	return pageFlg;
} 
